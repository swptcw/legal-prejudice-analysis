{'role': 'assistant', 'content': 'Now, let\'s create a client-side integration example that demonstrates how to use our API from a case management system:\n\n<function_calls>\n<create-file file_path="prejudice_risk_calculator/cms_integration_example.py">\n#!/usr/bin/env python3\n"""\nExample Client Integration for Legal Prejudice Risk Calculator API\nThis demonstrates how a case management system might integrate with the API\n"""\n\nimport requests\nimport json\nimport time\nimport argparse\nimport sys\n\n# Configuration\nAPI_BASE_URL = "http://localhost:5000/api/v1"\nAPI_KEY = "TEST_API_KEY_12345"  # This would be securely stored in a real implementation\n\nclass PrejudiceRiskCalculatorClient:\n    """Client for interacting with the Legal Prejudice Risk Calculator API"""\n    \n    def __init__(self, base_url=API_BASE_URL, api_key=API_KEY):\n        """Initialize the client with base URL and API key"""\n        self.base_url = base_url\n        self.api_key = api_key\n        self.headers = {\n            "Authorization": f"ApiKey {api_key}",\n            "Content-Type": "application/json"\n        }\n    \n    def check_api_status(self):\n        """Check if the API is operational"""\n        try:\n            response = requests.get(f"{self.base_url}/status", headers=self.headers)\n            if response.status_code == 200:\n                return response.json()\n            else:\n                print(f"Error checking API status: {response.status_code}")\n                return None\n        except Exception as e:\n            print(f"Exception checking API status: {str(e)}")\n            return None\n    \n    def create_assessment(self, case_name, judge_name, assessor_name, case_id=None, cms_id=None):\n        """Create a new prejudice risk assessment"""\n        try:\n            data = {\n                "case_name": case_name,\n                "judge_name": judge_name,\n                "assessor_name": assessor_name\n            }\n            \n            if case_id:\n                data["case_id"] = case_id\n            \n            if cms_id:\n                data["case_management_system_id"] = cms_id\n            \n            response = requests.post(f"{self.base_url}/assessments", headers=self.headers, json=data)\n            \n            if response.status_code == 201:\n                return response.json()\n            else:\n                print(f"Error creating assessment: {response.status_code}")\n                print(response.text)\n                return None\n        except Exception as e:\n            print(f"Exception creating assessment: {str(e)}")\n            return None\n    \n    def get_assessment(self, assessment_id):\n        """Retrieve an existing assessment"""\n        try:\n            response = requests.get(f"{self.base_url}/assessments/{assessment_id}", headers=self.headers)\n            \n            if response.status_code == 200:\n                return response.json()\n            else:\n                print(f"Error retrieving assessment: {response.status_code}")\n                return None\n        except Exception as e:\n            print(f"Exception retrieving assessment: {str(e)}")\n            return None\n    \n    def update_assessment(self, assessment_id, data):\n        """Update an existing assessment"""\n        try:\n            response = requests.put(f"{self.base_url}/assessments/{assessment_id}", headers=self.headers, json=data)\n            \n            if response.status_code == 200:\n                return response.json()\n            else:\n                print(f"Error updating assessment: {response.status_code}")\n                return None\n        except Exception as e:\n            print(f"Exception updating assessment: {str(e)}")\n            return None\n    \n    def delete_assessment(self, assessment_id):\n        """Delete an assessment"""\n        try:\n            response = requests.delete(f"{self.base_url}/assessments/{assessment_id}", headers=self.headers)\n            \n            if response.status_code == 200:\n                return response.json()\n            else:\n                print(f"Error deleting assessment: {response.status_code}")\n                return None\n        except Exception as e:\n            print(f"Exception deleting assessment: {str(e)}")\n            return None\n    \n    def get_factor_definitions(self):\n        """Get all factor definitions"""\n        try:\n            response = requests.get(f"{self.base_url}/factor_definitions", headers=self.headers)\n            \n            if response.status_code == 200:\n                return response.json()\n            else:\n                print(f"Error retrieving factor definitions: {response.status_code}")\n                return None\n        except Exception as e:\n            print(f"Exception retrieving factor definitions: {str(e)}")\n            return None\n    \n    def submit_factor_ratings(self, assessment_id, factors):\n        """Submit ratings for multiple factors"""\n        try:\n            data = {"factors": factors}\n            response = requests.post(f"{self.base_url}/assessments/{assessment_id}/factors", headers=self.headers, json=data)\n            \n            if response.status_code == 200:\n                return response.json()\n            else:\n                print(f"Error submitting factor ratings: {response.status_code}")\n                return None\n        except Exception as e:\n            print(f"Exception submitting factor ratings: {str(e)}")\n            return None\n    \n    def get_factor_ratings(self, assessment_id):\n        """Retrieve all factor ratings for an assessment"""\n        try:\n            response = requests.get(f"{self.base_url}/assessments/{assessment_id}/factors", headers=self.headers)\n            \n            if response.status_code == 200:\n                return response.json()\n            else:\n                print(f"Error retrieving factor ratings: {response.status_code}")\n                return None\n        except Exception as e:\n            print(f"Exception retrieving factor ratings: {str(e)}")\n            return None\n    \n    def calculate_results(self, assessment_id):\n        """Calculate risk scores based on current factor ratings"""\n        try:\n            response = requests.post(f"{self.base_url}/assessments/{assessment_id}/calculate", headers=self.headers)\n            \n            if response.status_code == 200:\n                return response.json()\n            else:\n                print(f"Error calculating results: {response.status_code}")\n                return None\n        except Exception as e:\n            print(f"Exception calculating results: {str(e)}")\n            return None\n    \n    def link_to_case(self, assessment_id, cms_type, case_id, matter_id=None, sync_data=True):\n        """Link assessment to a case in external case management system"""\n        try:\n            data = {\n                "cms_type": cms_type,\n                "case_id": case_id,\n                "sync_data": sync_data\n            }\n            \n            if matter_id:\n                data["matter_id"] = matter_id\n            \n            response = requests.post(f"{self.base_url}/assessments/{assessment_id}/link", headers=self.headers, json=data)\n            \n            if response.status_code == 200:\n                return response.json()\n            else:\n                print(f"Error linking to case: {response.status_code}")\n                return None\n        except Exception as e:\n            print(f"Exception linking to case: {str(e)}")\n            return None\n\ndef print_json(data):\n    """Print JSON data in a readable format"""\n    print(json.dumps(data, indent=2))\n\ndef run_demo():\n    """Run a demonstration of the API client"""\n    client = PrejudiceRiskCalculatorClient()\n    \n    # Check API status\n    print("Checking API status...")\n    status = client.check_api_status()\n    if not status:\n        print("API is not available. Please make sure the API server is running.")\n        return\n    \n    print("API is operational:")\n    print_json(status)\n    print("\\n" + "-" * 80 + "\\n")\n    \n    # Create a new assessment\n    print("Creating a new assessment...")\n    case_name = "Smith v. Jones Corporation"\n    judge_name = "Hon. Robert Williams"\n    assessor_name = "Jane Attorney"\n    case_id = "CASE-2025-0429"\n    cms_id = "CMS-12345"\n    \n    assessment = client.create_assessment(case_name, judge_name, assessor_name, case_id, cms_id)\n    if not assessment:\n        print("Failed to create assessment. Exiting.")\n        return\n    \n    assessment_id = assessment["assessment_id"]\n    print(f"Assessment created with ID: {assessment_id}")\n    print_json(assessment)\n    print("\\n" + "-" * 80 + "\\n")\n    \n    # Get factor definitions\n    print("Getting factor definitions...")\n    definitions = client.get_factor_definitions()\n    if not definitions:\n        print("Failed to get factor definitions. Exiting.")\n        return\n    \n    print("Factor definitions retrieved:")\n    # Just print the categories to avoid too much output\n    for category, data in definitions.items():\n        print(f"Category: {data[\'name\']}")\n        print(f"  Factors: {len(data[\'factors\'])}")\n    print("\\n" + "-" * 80 + "\\n")\n    \n    # Submit factor ratings\n    print("Submitting factor ratings...")\n    factors = [\n        {\n            "id": "financial-direct",\n            "likelihood": 4,\n            "impact": 5,\n            "notes": "Judge owns 1000 shares in defendant corporation"\n        },\n        {\n            "id": "relationship-family",\n            "likelihood": 3,\n            "impact": 4,\n            "notes": "Judge\'s cousin is married to plaintiff\'s sister"\n        },\n        {\n            "id": "statements-disparaging",\n            "likelihood": 5,\n            "impact": 3,\n            "notes": "Judge made negative comments about plaintiff\'s counsel in previous case"\n        },\n        {\n            "id": "historical-consistent",\n            "likelihood": 4,\n            "impact": 4,\n            "notes": "Judge has ruled against similar plaintiffs in 8 out of 10 previous cases"\n        }\n    ]\n    \n    result = client.submit_factor_ratings(assessment_id, factors)\n    if not result:\n        print("Failed to submit factor ratings. Exiting.")\n        return\n    \n    print("Factor ratings submitted:")\n    print_json(result)\n    print("\\n" + "-" * 80 + "\\n")\n    \n    # Get factor ratings\n    print("Getting factor ratings...")\n    ratings = client.get_factor_ratings(assessment_id)\n    if not ratings:\n        print("Failed to get factor ratings. Exiting.")\n        return\n    \n    print("Factor ratings retrieved:")\n    print_json(ratings)\n    print("\\n" + "-" * 80 + "\\n")\n    \n    # Calculate results\n    print("Calculating results...")\n    results = client.calculate_results(assessment_id)\n    if not results:\n        print("Failed to calculate results. Exiting.")\n        return\n    \n    print("Results calculated:")\n    print_json(results)\n    print("\\n" + "-" * 80 + "\\n")\n    \n    # Link to case management system\n    print("Linking to case management system...")\n    link_result = client.link_to_case(assessment_id, "Clio", "CLIO-12345", "MATTER-6789")\n    if not link_result:\n        print("Failed to link to case. Exiting.")\n        return\n    \n    print("Linked to case management system:")\n    print_json(link_result)\n    print("\\n" + "-" * 80 + "\\n")\n    \n    # Get updated assessment\n    print("Getting updated assessment...")\n    updated_assessment = client.get_assessment(assessment_id)\n    if not updated_assessment:\n        print("Failed to get updated assessment. Exiting.")\n        return\n    \n    print("Updated assessment retrieved:")\n    print_json(updated_assessment)\n    print("\\n" + "-" * 80 + "\\n")\n    \n    print("Demo completed successfully!")\n\ndef main():\n    """Main entry point"""\n    parser = argparse.ArgumentParser(description="Legal Prejudice Risk Calculator API Client")\n    parser.add_argument("--demo", action="store_true", help="Run the demo")\n    parser.add_argument("--url", help="API base URL", default=API_BASE_URL)\n    parser.add_argument("--key", help="API key", default=API_KEY)\n    \n    args = parser.parse_args()\n    \n    if args.demo:\n        run_demo()\n    else:\n        parser.print_help()\n\nif __name__ == "__main__":\n    main()\n</create-file>\n</function_calls>', 'tool_calls': None}