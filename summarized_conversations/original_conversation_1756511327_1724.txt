{'role': 'assistant', 'content': 'Now let\'s create feature images for the landing page:\n\n<function_calls>\n<create-file file_path="landing-page/create_feature_images.py">\nfrom PIL import Image, ImageDraw, ImageFont\nimport os\n\n# Ensure features directory exists\nos.makedirs(\'assets/features\', exist_ok=True)\n\n# Function to create a feature image\ndef create_feature_image(filename, title, color, icon_type):\n    width, height = 400, 200\n    img = Image.new(\'RGB\', (width, height), color)\n    draw = ImageDraw.Draw(img)\n    \n    # Draw title\n    try:\n        font = ImageFont.truetype("arial.ttf", 24)\n    except IOError:\n        font = ImageFont.load_default()\n    \n    text_width = len(title) * 12  # Approximate width\n    text_x = (width - text_width) // 2\n    draw.text((text_x, 20), title, fill=(255, 255, 255), font=font)\n    \n    # Draw icon based on type\n    if icon_type == "framework":\n        # Draw a document with sections\n        doc_x, doc_y = width//2 - 30, height//2 - 20\n        doc_width, doc_height = 60, 80\n        draw.rectangle([(doc_x, doc_y), (doc_x + doc_width, doc_y + doc_height)], fill=(255, 255, 255))\n        \n        # Draw lines representing text\n        for i in range(5):\n            line_y = doc_y + 15 + i * 12\n            draw.line([(doc_x + 10, line_y), (doc_x + doc_width - 10, line_y)], fill=color, width=2)\n    \n    elif icon_type == "risk":\n        # Draw a risk matrix\n        matrix_x, matrix_y = width//2 - 40, height//2 - 30\n        matrix_size = 80\n        draw.rectangle([(matrix_x, matrix_y), (matrix_x + matrix_size, matrix_y + matrix_size)], outline=(255, 255, 255), width=2)\n        \n        # Draw grid lines\n        for i in range(1, 4):\n            # Horizontal lines\n            draw.line([(matrix_x, matrix_y + i * matrix_size//4), \n                      (matrix_x + matrix_size, matrix_y + i * matrix_size//4)], \n                      fill=(255, 255, 255), width=1)\n            \n            # Vertical lines\n            draw.line([(matrix_x + i * matrix_size//4, matrix_y), \n                      (matrix_x + i * matrix_size//4, matrix_y + matrix_size)], \n                      fill=(255, 255, 255), width=1)\n        \n        # Draw a risk point\n        draw.ellipse([(matrix_x + 60, matrix_y + 15), (matrix_x + 70, matrix_y + 25)], fill=(231, 76, 60))\n    \n    elif icon_type == "guide":\n        # Draw a checklist\n        check_x, check_y = width//2 - 30, height//2 - 40\n        check_width, check_height = 60, 80\n        \n        # Draw clipboard\n        draw.rectangle([(check_x, check_y), (check_x + check_width, check_y + check_height)], fill=(255, 255, 255))\n        draw.rectangle([(check_x + 15, check_y - 10), (check_x + 45, check_y)], fill=(200, 200, 200))\n        \n        # Draw checklist items\n        for i in range(5):\n            item_y = check_y + 15 + i * 15\n            # Checkbox\n            draw.rectangle([(check_x + 10, item_y), (check_x + 20, item_y + 10)], outline=(color[0], color[1], color[2]))\n            # Check mark in some boxes\n            if i % 2 == 0:\n                draw.line([(check_x + 12, item_y + 5), (check_x + 15, item_y + 8)], fill=color, width=2)\n                draw.line([(check_x + 15, item_y + 8), (check_x + 18, item_y + 2)], fill=color, width=2)\n            # Line representing text\n            draw.line([(check_x + 25, item_y + 5), (check_x + 50, item_y + 5)], fill=color, width=2)\n    \n    elif icon_type == "calculator":\n        # Draw a calculator\n        calc_x, calc_y = width//2 - 30, height//2 - 40\n        calc_width, calc_height = 60, 80\n        \n        # Draw calculator body\n        draw.rectangle([(calc_x, calc_y), (calc_x + calc_width, calc_y + calc_height)], fill=(50, 50, 50))\n        \n        # Draw calculator screen\n        draw.rectangle([(calc_x + 5, calc_y + 5), (calc_x + calc_width - 5, calc_y + 20)], fill=(200, 255, 200))\n        \n        # Draw calculator buttons\n        button_size = 10\n        for row in range(4):\n            for col in range(4):\n                button_x = calc_x + 8 + col * (button_size + 5)\n                button_y = calc_y + 30 + row * (button_size + 5)\n                draw.rectangle([(button_x, button_y), (button_x + button_size, button_y + button_size)], fill=(200, 200, 200))\n    \n    elif icon_type == "api":\n        # Draw API icon\n        api_x, api_y = width//2 - 40, height//2 - 20\n        \n        # Draw brackets representing API\n        # Left bracket\n        draw.line([(api_x, api_y), (api_x + 15, api_y)], fill=(255, 255, 255), width=3)\n        draw.line([(api_x, api_y), (api_x, api_y + 40)], fill=(255, 255, 255), width=3)\n        draw.line([(api_x, api_y + 40), (api_x + 15, api_y + 40)], fill=(255, 255, 255), width=3)\n        \n        # Right bracket\n        draw.line([(api_x + 65, api_y), (api_x + 80, api_y)], fill=(255, 255, 255), width=3)\n        draw.line([(api_x + 80, api_y), (api_x + 80, api_y + 40)], fill=(255, 255, 255), width=3)\n        draw.line([(api_x + 65, api_y + 40), (api_x + 80, api_y + 40)], fill=(255, 255, 255), width=3)\n        \n        # Draw "API" text\n        draw.text((api_x + 25, api_y + 10), "API", fill=(255, 255, 255), font=font)\n    \n    elif icon_type == "case":\n        # Draw a case file\n        case_x, case_y = width//2 - 40, height//2 - 30\n        case_width, case_height = 80, 60\n        \n        # Draw folder\n        draw.rectangle([(case_x, case_y), (case_x + case_width, case_y + case_height)], fill=(241, 196, 15))\n        draw.polygon([(case_x, case_y), (case_x + 20, case_y - 15), (case_x + 60, case_y - 15), (case_x + 80, case_y)], fill=(241, 196, 15))\n        \n        # Draw lines representing text\n        for i in range(3):\n            line_y = case_y + 15 + i * 12\n            draw.line([(case_x + 10, line_y), (case_x + case_width - 10, line_y)], fill=(color[0], color[1], color[2]), width=2)\n    \n    # Save the image\n    img.save(f\'assets/features/{filename}\')\n    return f\'assets/features/{filename}\'\n\n# Create feature images\nfeature_images = [\n    ("feature-framework.jpg", "Legal Prejudice Framework", (52, 152, 219), "framework"),\n    ("feature-risk.jpg", "Risk & Probability Analysis", (46, 204, 113), "risk"),\n    ("feature-guide.jpg", "Practical Implementation", (155, 89, 182), "guide"),\n    ("feature-calculator.jpg", "Interactive Risk Calculator", (52, 73, 94), "calculator"),\n    ("feature-api.jpg", "API & Integration", (230, 126, 34), "api"),\n    ("feature-case.jpg", "Case Studies", (231, 76, 60), "case")\n]\n\nfor filename, title, color, icon_type in feature_images:\n    path = create_feature_image(filename, title, color, icon_type)\n    print(f"Created {path}")\n\nprint("All feature images created successfully!")\n</create-file>\n</function_calls>', 'tool_calls': None}