{'role': 'assistant', 'content': 'It looks like port 8000 is already in use. Let\'s modify our server to use a different port:\n\n<function_calls>\n<full-file-rewrite file_path="prejudice_risk_calculator/server.py">\n#!/usr/bin/env python3\n"""\nSimple HTTP server for the Legal Prejudice Risk Calculator\n"""\n\nimport http.server\nimport socketserver\nimport os\nimport webbrowser\nfrom urllib.parse import urlparse\n\n# Configuration\nPORT = 8080  # Changed from 8000 to 8080\nDIRECTORY = os.path.dirname(os.path.abspath(__file__))\n\nclass CustomHTTPRequestHandler(http.server.SimpleHTTPRequestHandler):\n    """Custom HTTP request handler that serves from the current directory"""\n    \n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, directory=DIRECTORY, **kwargs)\n    \n    def do_GET(self):\n        """Handle GET requests"""\n        # Redirect root to index.html\n        if self.path == \'/\':\n            self.path = \'/templates/index.html\'\n        \n        # Handle other requests normally\n        return http.server.SimpleHTTPRequestHandler.do_GET(self)\n    \n    def log_message(self, format, *args):\n        """Log server activity"""\n        print(f"[SERVER] {format % args}")\n\ndef run_server():\n    """Run the HTTP server"""\n    with socketserver.TCPServer(("", PORT), CustomHTTPRequestHandler) as httpd:\n        print(f"Server running at http://localhost:{PORT}/")\n        print(f"Press Ctrl+C to stop the server")\n        \n        # Open browser automatically\n        # Commented out to avoid issues in the sandbox environment\n        # webbrowser.open(f"http://localhost:{PORT}/")\n        \n        # Keep the server running\n        try:\n            httpd.serve_forever()\n        except KeyboardInterrupt:\n            print("\\nServer stopped.")\n\nif __name__ == "__main__":\n    run_server()\n</full-file-rewrite>\n</function_calls>', 'tool_calls': None}