{'role': 'assistant', 'content': 'Now, let\'s create a simple deployment script that users can run to set up the system easily:\n\n<function_calls>\n<create-file file_path="docker/deploy.sh">\n#!/bin/bash\n# Deployment script for Legal Prejudice Analysis Project\n\nset -e\n\n# Display banner\necho "=================================================="\necho "  Legal Prejudice Analysis Project Deployment"\necho "=================================================="\necho ""\n\n# Check for Docker and Docker Compose\necho "Checking prerequisites..."\nif ! command -v docker &> /dev/null; then\n    echo "Error: Docker is not installed. Please install Docker first."\n    echo "Visit https://docs.docker.com/get-docker/ for installation instructions."\n    exit 1\nfi\n\nif ! command -v docker-compose &> /dev/null; then\n    echo "Error: Docker Compose is not installed. Please install Docker Compose first."\n    echo "Visit https://docs.docker.com/compose/install/ for installation instructions."\n    exit 1\nfi\n\necho "Docker and Docker Compose are installed."\necho ""\n\n# Check for .env file\nif [ ! -f .env ]; then\n    echo "Environment file (.env) not found. Creating from example..."\n    if [ -f .env.example ]; then\n        cp .env.example .env\n        echo "Created .env file from example. Please edit it with your configuration."\n        echo "You should at least change the following values:"\n        echo "  - DB_PASSWORD"\n        echo "  - API_SECRET_KEY"\n        echo "  - JWT_SECRET (if using authentication)"\n    else\n        echo "Error: .env.example file not found. Please create a .env file manually."\n        exit 1\n    fi\nfi\n\n# Prompt for configuration\necho "Do you want to edit the .env file now? (y/n)"\nread -r edit_env\nif [[ "$edit_env" =~ ^[Yy]$ ]]; then\n    if command -v nano &> /dev/null; then\n        nano .env\n    elif command -v vim &> /dev/null; then\n        vim .env\n    else\n        echo "No editor found. Please edit the .env file manually before continuing."\n        echo "Press Enter to continue once you\'ve edited the file..."\n        read -r\n    fi\nfi\n\n# Create necessary directories\necho "Creating necessary directories..."\nmkdir -p nginx/certs\n\n# Check if SSL certificates exist\nif [ ! -f nginx/certs/server.crt ] || [ ! -f nginx/certs/server.key ]; then\n    echo "SSL certificates not found. Do you want to:"\n    echo "1) Generate self-signed certificates (for testing only)"\n    echo "2) Skip SSL setup (HTTP only)"\n    echo "3) Exit to add your own certificates"\n    read -r ssl_option\n    \n    case $ssl_option in\n        1)\n            echo "Generating self-signed certificates..."\n            openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n                -keyout nginx/certs/server.key \\\n                -out nginx/certs/server.crt \\\n                -subj "/CN=localhost"\n            echo "Self-signed certificates generated. Note: These are for testing only."\n            \n            # Uncomment SSL configuration in nginx config\n            sed -i \'s/# server {/server {/\' nginx/conf.d/default.conf\n            sed -i \'s/# }/}/\' nginx/conf.d/default.conf\n            sed -i \'s/#     /    /\' nginx/conf.d/default.conf\n            ;;\n        2)\n            echo "Skipping SSL setup. The system will be available over HTTP only."\n            ;;\n        3)\n            echo "Exiting. Please add your SSL certificates to nginx/certs/ and run this script again."\n            exit 0\n            ;;\n        *)\n            echo "Invalid option. Skipping SSL setup."\n            ;;\n    esac\nfi\n\n# Pull or build Docker images\necho "Building Docker images..."\ndocker-compose build\n\n# Start the services\necho "Starting services..."\ndocker-compose up -d\n\n# Check if services are running\necho "Checking if services are running..."\nsleep 5\nif docker-compose ps | grep -q "Exit"; then\n    echo "Error: Some services failed to start. Check the logs with \'docker-compose logs\'."\n    exit 1\nfi\n\n# Get the public URL\nHOST_IP=$(hostname -I | awk \'{print $1}\')\nPORT=$(grep EXTERNAL_PORT .env | cut -d= -f2 || echo 8080)\n\necho ""\necho "=================================================="\necho "  Deployment Complete!"\necho "=================================================="\necho ""\necho "Your Legal Prejudice Analysis system is now running."\necho ""\necho "Access the system at:"\necho "  - Web Interface: http://$HOST_IP:$PORT"\necho "  - API Documentation: http://$HOST_IP:$PORT/api/docs"\necho ""\necho "To view logs:"\necho "  docker-compose logs"\necho ""\necho "To stop the system:"\necho "  docker-compose down"\necho ""\necho "To update the system:"\necho "  git pull"\necho "  docker-compose down"\necho "  docker-compose build"\necho "  docker-compose up -d"\necho ""\necho "For more information, see the documentation in the README.md file."\necho "=================================================="\n</create-file>\n</function_calls>', 'tool_calls': None}