{'role': 'assistant', 'content': 'Let\'s create the Alembic environment script:\n\n<function_calls>\n<create-file file_path="prejudice_risk_calculator/production_setup/migrations/env.py">\nfrom __future__ import with_statement\n\nimport os\nimport sys\nfrom logging.config import fileConfig\n\nfrom sqlalchemy import engine_from_config\nfrom sqlalchemy import pool\n\nfrom alembic import context\n\n# Add parent directory to path so we can import our models\nsys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\n# Import our models\nfrom models import Base\n\n# this is the Alembic Config object, which provides\n# access to the values within the .ini file in use.\nconfig = context.config\n\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nfileConfig(config.config_file_name)\n\n# Set the database URL from environment variable\nif \'DATABASE_URL\' in os.environ:\n    config.set_main_option(\'sqlalchemy.url\', os.environ[\'DATABASE_URL\'])\n\n# add your model\'s MetaData object here\n# for \'autogenerate\' support\ntarget_metadata = Base.metadata\n\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option("my_important_option")\n# ... etc.\n\n\ndef run_migrations_offline():\n    """Run migrations in \'offline\' mode.\n\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don\'t even need a DBAPI to be available.\n\n    Calls to context.execute() here emit the given string to the\n    script output.\n\n    """\n    url = config.get_main_option("sqlalchemy.url")\n    context.configure(\n        url=url,\n        target_metadata=target_metadata,\n        literal_binds=True,\n        dialect_opts={"paramstyle": "named"},\n    )\n\n    with context.begin_transaction():\n        context.run_migrations()\n\n\ndef run_migrations_online():\n    """Run migrations in \'online\' mode.\n\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n\n    """\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section),\n        prefix="sqlalchemy.",\n        poolclass=pool.NullPool,\n    )\n\n    with connectable.connect() as connection:\n        context.configure(\n            connection=connection, target_metadata=target_metadata\n        )\n\n        with context.begin_transaction():\n            context.run_migrations()\n\n\nif context.is_offline_mode():\n    run_migrations_offline()\nelse:\n    run_migrations_online()\n</create-file>\n</function_calls>', 'tool_calls': None}