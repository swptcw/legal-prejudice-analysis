{'role': 'assistant', 'content': 'Now, let\'s create the CMS integration routes:\n\n<function_calls>\n<create-file file_path="prejudice_risk_calculator/production_setup/routes/cms.py">\n"""\nRoutes for CMS integration\n"""\n\nimport datetime\nfrom flask import Blueprint, jsonify, request, current_app, g\nfrom sqlalchemy.exc import SQLAlchemyError\nfrom werkzeug.exceptions import NotFound, BadRequest\nfrom flask_limiter import Limiter\nfrom flask_limiter.util import get_remote_address\n\nfrom models import Assessment, CMSLink\nfrom utils.auth import require_api_key\nfrom utils.validation import validate_cms_link_data\nfrom utils.events import trigger_event\n\n# Create blueprint\ncms_bp = Blueprint(\'cms\', __name__)\n\n# Initialize rate limiter\nlimiter = Limiter(key_func=get_remote_address)\n\n@cms_bp.route(\'/assessments/<assessment_id>/link\', methods=[\'POST\'])\n@require_api_key\ndef link_to_case(assessment_id):\n    """Link assessment to a case in external case management system"""\n    try:\n        # Query assessment\n        assessment = g.db_session.query(Assessment).filter_by(assessment_id=assessment_id).first()\n        if not assessment:\n            raise NotFound(f"Assessment {assessment_id} not found")\n        \n        # Validate request data\n        data = request.get_json()\n        if not data:\n            raise BadRequest("No data provided")\n        \n        errors = validate_cms_link_data(data)\n        if errors:\n            return jsonify({"errors": errors}), 400\n        \n        timestamp = datetime.datetime.utcnow()\n        \n        # Check if link already exists\n        existing_link = g.db_session.query(CMSLink).filter_by(\n            assessment_id=assessment.id,\n            cms_type=data["cms_type"]\n        ).first()\n        \n        if existing_link:\n            # Update existing link\n            existing_link.cms_case_id = data["case_id"]\n            existing_link.cms_matter_id = data.get("matter_id", "")\n            existing_link.sync_data = data.get("sync_data", False)\n            existing_link.updated_at = timestamp\n            link = existing_link\n        else:\n            # Create new link\n            link = CMSLink(\n                assessment_id=assessment.id,\n                cms_type=data["cms_type"],\n                cms_case_id=data["case_id"],\n                cms_matter_id=data.get("matter_id", ""),\n                sync_data=data.get("sync_data", False),\n                linked_at=timestamp,\n                updated_at=timestamp\n            )\n            g.db_session.add(link)\n        \n        # Update assessment\n        assessment.updated_at = timestamp\n        \n        # Save changes\n        g.db_session.commit()\n        \n        # Trigger event\n        event_type = \'link.created\' if not existing_link else \'link.updated\'\n        trigger_event(event_type, {\n            \'assessment_id\': assessment_id,\n            \'cms_type\': link.cms_type,\n            \'cms_case_id\': link.cms_case_id,\n            \'cms_matter_id\': link.cms_matter_id,\n            \'sync_data\': link.sync_data,\n            \'timestamp\': timestamp.isoformat()\n        })\n        \n        return jsonify({\n            "status": "linked" if not existing_link else "updated",\n            "cms_type": link.cms_type,\n            "case_id": link.cms_case_id,\n            "linked_at": link.linked_at.isoformat(),\n            "updated_at": link.updated_at.isoformat()\n        }), 200\n        \n    except NotFound as e:\n        return jsonify({"error": str(e)}), 404\n    except BadRequest as e:\n        return jsonify({"error": str(e)}), 400\n    except SQLAlchemyError as e:\n        g.db_session.rollback()\n        current_app.logger.error(f"Database error linking assessment to case: {str(e)}")\n        return jsonify({"error": "Database error"}), 500\n    except Exception as e:\n        g.db_session.rollback()\n        current_app.logger.exception(f"Error linking assessment to case: {str(e)}")\n        return jsonify({"error": "Internal server error"}), 500\n\n@cms_bp.route(\'/assessments/<assessment_id>/links\', methods=[\'GET\'])\n@require_api_key\ndef get_cms_links(assessment_id):\n    """Get all CMS links for an assessment"""\n    try:\n        # Query assessment\n        assessment = g.db_session.query(Assessment).filter_by(assessment_id=assessment_id).first()\n        if not assessment:\n            raise NotFound(f"Assessment {assessment_id} not found")\n        \n        # Query links\n        links = g.db_session.query(CMSLink).filter_by(assessment_id=assessment.id).all()\n        \n        # Convert to dictionaries\n        link_list = [link.to_dict() for link in links]\n        \n        return jsonify({\n            "assessment_id": assessment_id,\n            "links": link_list\n        }), 200\n        \n    except NotFound as e:\n        return jsonify({"error": str(e)}), 404\n    except Exception as e:\n        current_app.logger.exception(f"Error retrieving CMS links: {str(e)}")\n        return jsonify({"error": "Internal server error"}), 500\n\n@cms_bp.route(\'/assessments/<assessment_id>/links/<cms_type>\', methods=[\'DELETE\'])\n@require_api_key\ndef delete_cms_link(assessment_id, cms_type):\n    """Delete a CMS link"""\n    try:\n        # Query assessment\n        assessment = g.db_session.query(Assessment).filter_by(assessment_id=assessment_id).first()\n        if not assessment:\n            raise NotFound(f"Assessment {assessment_id} not found")\n        \n        # Query link\n        link = g.db_session.query(CMSLink).filter_by(\n            assessment_id=assessment.id,\n            cms_type=cms_type\n        ).first()\n        \n        if not link:\n            raise NotFound(f"No link found for CMS type {cms_type}")\n        \n        # Delete link\n        timestamp = datetime.datetime.utcnow()\n        \n        # Trigger event before deletion\n        trigger_event(\'link.deleted\', {\n            \'assessment_id\': assessment_id,\n            \'cms_type\': link.cms_type,\n            \'cms_case_id\': link.cms_case_id,\n            \'deleted_at\': timestamp.isoformat()\n        })\n        \n        g.db_session.delete(link)\n        \n        # Update assessment\n        assessment.updated_at = timestamp\n        \n        # Save changes\n        g.db_session.commit()\n        \n        return jsonify({\n            "status": "deleted",\n            "cms_type": cms_type,\n            "deleted_at": timestamp.isoformat()\n        }), 200\n        \n    except NotFound as e:\n        return jsonify({"error": str(e)}), 404\n    except SQLAlchemyError as e:\n        g.db_session.rollback()\n        current_app.logger.error(f"Database error deleting CMS link: {str(e)}")\n        return jsonify({"error": "Database error"}), 500\n    except Exception as e:\n        g.db_session.rollback()\n        current_app.logger.exception(f"Error deleting CMS link: {str(e)}")\n        return jsonify({"error": "Internal server error"}), 500\n\n@cms_bp.route(\'/assessments/<assessment_id>/sync\', methods=[\'POST\'])\n@require_api_key\ndef sync_case_data(assessment_id):\n    """Sync data between assessment and case management system"""\n    try:\n        # Query assessment\n        assessment = g.db_session.query(Assessment).filter_by(assessment_id=assessment_id).first()\n        if not assessment:\n            raise NotFound(f"Assessment {assessment_id} not found")\n        \n        # Query links\n        links = g.db_session.query(CMSLink).filter_by(assessment_id=assessment.id).all()\n        \n        if not links:\n            raise BadRequest(f"Assessment {assessment_id} is not linked to any CMS")\n        \n        # In a real implementation, this would connect to the CMS APIs\n        # For now, we\'ll simulate a successful sync\n        timestamp = datetime.datetime.utcnow()\n        \n        synced_fields = ["case_name", "judge_name", "dates"]\n        synced_cms = [link.cms_type for link in links if link.sync_data]\n        \n        if not synced_cms:\n            return jsonify({\n                "status": "no_sync",\n                "message": "No CMS links are configured for data synchronization"\n            }), 200\n        \n        # Update assessment timestamp\n        assessment.updated_at = timestamp\n        g.db_session.commit()\n        \n        return jsonify({\n            "status": "synced",\n            "synced_fields": synced_fields,\n            "synced_cms": synced_cms,\n            "synced_at": timestamp.isoformat()\n        }), 200\n        \n    except NotFound as e:\n        return jsonify({"error": str(e)}), 404\n    except BadRequest as e:\n        return jsonify({"error": str(e)}), 400\n    except SQLAlchemyError as e:\n        g.db_session.rollback()\n        current_app.logger.error(f"Database error syncing case data: {str(e)}")\n        return jsonify({"error": "Database error"}), 500\n    except Exception as e:\n        g.db_session.rollback()\n        current_app.logger.exception(f"Error syncing case data: {str(e)}")\n        return jsonify({"error": "Internal server error"}), 500\n\n@cms_bp.route(\'/systems\', methods=[\'GET\'])\n@require_api_key\ndef list_cms_systems():\n    """List supported case management systems"""\n    try:\n        # In a real implementation, this would be dynamic or database-driven\n        cms_systems = [\n            {\n                "id": "clio",\n                "name": "Clio",\n                "description": "Clio is a cloud-based legal practice management software.",\n                "features": ["Two-way sync", "Document attachment", "Calendar integration"],\n                "documentation_url": "https://api.prejudicerisk.example.com/docs/cms/clio"\n            },\n            {\n                "id": "practice_panther",\n                "name": "Practice Panther",\n                "description": "Practice Panther is a legal management software for law firms.",\n                "features": ["Matter linking", "Contact synchronization", "Billing integration"],\n                "documentation_url": "https://api.prejudicerisk.example.com/docs/cms/practice_panther"\n            },\n            {\n                "id": "mycase",\n                "name": "MyCase",\n                "description": "MyCase is a web-based legal practice management software.",\n                "features": ["Document generation", "Task creation", "Client portal integration"],\n                "documentation_url": "https://api.prejudicerisk.example.com/docs/cms/mycase"\n            },\n            {\n                "id": "rocket_matter",\n                "name": "Rocket Matter",\n                "description": "Rocket Matter is a cloud-based legal practice management software.",\n                "features": ["Matter linking", "Calendar integration", "Billing codes"],\n                "documentation_url": "https://api.prejudicerisk.example.com/docs/cms/rocket_matter"\n            }\n        ]\n        \n        return jsonify({\n            "cms_systems": cms_systems\n        }), 200\n        \n    except Exception as e:\n        current_app.logger.exception(f"Error listing CMS systems: {str(e)}")\n        return jsonify({"error": "Internal server error"}), 500\n</create-file>\n</function_calls>', 'tool_calls': None}