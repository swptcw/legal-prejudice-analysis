{'role': 'assistant', 'content': 'Now I\'ll create the JavaScript file to make our risk calculator interactive:\n\n<function_calls>\n<create-file file_path="prejudice_risk_calculator/js/script.js">\n// Legal Prejudice Risk Calculator\ndocument.addEventListener(\'DOMContentLoaded\', function() {\n    // Tab Navigation\n    const tabButtons = document.querySelectorAll(\'.tab-btn\');\n    const tabPanes = document.querySelectorAll(\'.tab-pane\');\n    \n    tabButtons.forEach(button => {\n        button.addEventListener(\'click\', () => {\n            // Remove active class from all buttons and panes\n            tabButtons.forEach(btn => btn.classList.remove(\'active\'));\n            tabPanes.forEach(pane => pane.classList.remove(\'active\'));\n            \n            // Add active class to clicked button and corresponding pane\n            button.classList.add(\'active\');\n            const tabId = button.getAttribute(\'data-tab\');\n            document.getElementById(tabId).classList.add(\'active\');\n        });\n    });\n    \n    // Next and Previous Button Navigation\n    const nextButtons = document.querySelectorAll(\'.next-btn\');\n    const prevButtons = document.querySelectorAll(\'.prev-btn\');\n    \n    nextButtons.forEach(button => {\n        button.addEventListener(\'click\', () => {\n            const nextTabId = button.getAttribute(\'data-next\');\n            \n            // Remove active class from all buttons and panes\n            tabButtons.forEach(btn => btn.classList.remove(\'active\'));\n            tabPanes.forEach(pane => pane.classList.remove(\'active\'));\n            \n            // Add active class to next tab button and pane\n            document.querySelector(`.tab-btn[data-tab="${nextTabId}"]`).classList.add(\'active\');\n            document.getElementById(nextTabId).classList.add(\'active\');\n        });\n    });\n    \n    prevButtons.forEach(button => {\n        button.addEventListener(\'click\', () => {\n            const prevTabId = button.getAttribute(\'data-prev\');\n            \n            // Remove active class from all buttons and panes\n            tabButtons.forEach(btn => btn.classList.remove(\'active\'));\n            tabPanes.forEach(pane => pane.classList.remove(\'active\'));\n            \n            // Add active class to previous tab button and pane\n            document.querySelector(`.tab-btn[data-tab="${prevTabId}"]`).classList.add(\'active\');\n            document.getElementById(prevTabId).classList.add(\'active\');\n        });\n    });\n    \n    // Set current date as default for assessment date\n    const today = new Date().toISOString().split(\'T\')[0];\n    document.getElementById(\'assessment-date\').value = today;\n    \n    // Calculate Results Button\n    const calculateBtn = document.getElementById(\'calculate-btn\');\n    calculateBtn.addEventListener(\'click\', calculateResults);\n    \n    // Save PDF Button\n    const savePdfBtn = document.getElementById(\'save-pdf-btn\');\n    savePdfBtn.addEventListener(\'click\', () => {\n        alert(\'PDF generation would be implemented here. This would require a PDF generation library like jsPDF or a server-side solution.\');\n    });\n    \n    // Reset Form Button\n    const resetFormBtn = document.getElementById(\'reset-form-btn\');\n    resetFormBtn.addEventListener(\'click\', () => {\n        if (confirm(\'Are you sure you want to reset the entire form? All entered data will be lost.\')) {\n            resetForm();\n        }\n    });\n    \n    // Initialize Risk Matrix Visualization\n    initializeRiskMatrix();\n});\n\n// Factor data structure\nconst factorGroups = {\n    relationship: {\n        name: "Relationship-Based",\n        factors: [\n            { id: "financial-direct", name: "Direct financial interest" },\n            { id: "financial-indirect", name: "Indirect financial interest" },\n            { id: "relationship-family", name: "Family relationship" },\n            { id: "relationship-social", name: "Social/professional relationship" },\n            { id: "political-contributions", name: "Political contributions" },\n            { id: "ideological-advocacy", name: "Prior advocacy on disputed issue" }\n        ]\n    },\n    conduct: {\n        name: "Conduct-Based",\n        factors: [\n            { id: "statements-disparaging", name: "Disparaging remarks" },\n            { id: "statements-prejudgment", name: "Expressions indicating prejudgment" },\n            { id: "rulings-onesided", name: "One-sided evidentiary rulings" },\n            { id: "rulings-unequal", name: "Unequal allocation of time/resources" },\n            { id: "extrajudicial-public", name: "Public comments on pending case" },\n            { id: "extrajudicial-media", name: "Media interviews/social media posts" }\n        ]\n    },\n    contextual: {\n        name: "Contextual",\n        factors: [\n            { id: "historical-consistent", name: "Consistent rulings favoring similar parties" },\n            { id: "historical-prior", name: "Prior reversal for bias" },\n            { id: "procedural-deviation", name: "Deviation from standard procedures" },\n            { id: "procedural-reasoning", name: "Failure to provide reasoning" },\n            { id: "external-public", name: "High-profile case with public pressure" },\n            { id: "external-political", name: "Political implications for judge" }\n        ]\n    }\n};\n\n// Calculate risk scores and update results\nfunction calculateResults() {\n    // Get case information\n    const caseName = document.getElementById(\'case-name\').value || \'Unnamed Case\';\n    const judgeName = document.getElementById(\'judge-name\').value || \'Unnamed Judge\';\n    const assessmentDate = document.getElementById(\'assessment-date\').value;\n    const assessorName = document.getElementById(\'assessor-name\').value || \'Unnamed Assessor\';\n    \n    // Calculate scores for each category\n    const scores = {\n        relationship: calculateCategoryScore(\'relationship\'),\n        conduct: calculateCategoryScore(\'conduct\'),\n        contextual: calculateCategoryScore(\'contextual\')\n    };\n    \n    // Calculate overall risk score (average of all factors with values)\n    let totalScore = 0;\n    let factorCount = 0;\n    \n    for (const category in scores) {\n        if (scores[category].count > 0) {\n            totalScore += scores[category].score;\n            factorCount += scores[category].count;\n        }\n    }\n    \n    const overallScore = factorCount > 0 ? Math.round(totalScore / factorCount) : 0;\n    \n    // Determine risk level\n    let riskLevel;\n    if (overallScore >= 20) {\n        riskLevel = "Critical";\n    } else if (overallScore >= 15) {\n        riskLevel = "High";\n    } else if (overallScore >= 8) {\n        riskLevel = "Medium";\n    } else {\n        riskLevel = "Low";\n    }\n    \n    // Update results display\n    document.getElementById(\'overall-risk-score\').querySelector(\'.score-value\').textContent = overallScore;\n    \n    const riskLevelElement = document.getElementById(\'risk-level\');\n    riskLevelElement.querySelector(\'.level-value\').textContent = riskLevel;\n    riskLevelElement.setAttribute(\'data-level\', riskLevel);\n    \n    document.getElementById(\'relationship-score\').textContent = \n        scores.relationship.count > 0 ? scores.relationship.score : \'N/A\';\n    document.getElementById(\'conduct-score\').textContent = \n        scores.conduct.count > 0 ? scores.conduct.score : \'N/A\';\n    document.getElementById(\'contextual-score\').textContent = \n        scores.contextual.count > 0 ? scores.contextual.score : \'N/A\';\n    \n    // Update risk matrix visualization\n    updateRiskMatrix(getHighRiskFactors());\n    \n    // Generate recommendations based on risk level\n    generateRecommendations(riskLevel, overallScore);\n    \n    // Display high risk factors\n    displayHighRiskFactors(getHighRiskFactors());\n}\n\n// Calculate score for a specific category\nfunction calculateCategoryScore(category) {\n    let totalScore = 0;\n    let factorCount = 0;\n    \n    factorGroups[category].factors.forEach(factor => {\n        const likelihoodRadio = document.querySelector(`input[name="${factor.id}-likelihood"]:checked`);\n        const impactRadio = document.querySelector(`input[name="${factor.id}-impact"]:checked`);\n        \n        if (likelihoodRadio && impactRadio) {\n            const likelihood = parseInt(likelihoodRadio.value);\n            const impact = parseInt(impactRadio.value);\n            const factorScore = likelihood * impact;\n            totalScore += factorScore;\n            factorCount++;\n        }\n    });\n    \n    return {\n        score: factorCount > 0 ? Math.round(totalScore / factorCount) : 0,\n        count: factorCount\n    };\n}\n\n// Get all factors with their scores\nfunction getAllFactorScores() {\n    const factorScores = [];\n    \n    for (const categoryKey in factorGroups) {\n        const category = factorGroups[categoryKey];\n        \n        category.factors.forEach(factor => {\n            const likelihoodRadio = document.querySelector(`input[name="${factor.id}-likelihood"]:checked`);\n            const impactRadio = document.querySelector(`input[name="${factor.id}-impact"]:checked`);\n            \n            if (likelihoodRadio && impactRadio) {\n                const likelihood = parseInt(likelihoodRadio.value);\n                const impact = parseInt(impactRadio.value);\n                const score = likelihood * impact;\n                \n                factorScores.push({\n                    id: factor.id,\n                    name: factor.name,\n                    category: category.name,\n                    likelihood: likelihood,\n                    impact: impact,\n                    score: score,\n                    notes: document.getElementById(`${factor.id}-notes`).value\n                });\n            }\n        });\n    }\n    \n    // Sort by score (highest first)\n    factorScores.sort((a, b) => b.score - a.score);\n    \n    return factorScores;\n}\n\n// Get high risk factors (score >= 15)\nfunction getHighRiskFactors() {\n    return getAllFactorScores().filter(factor => factor.score >= 15);\n}\n\n// Display high risk factors\nfunction displayHighRiskFactors(highRiskFactors) {\n    const container = document.getElementById(\'high-risk-factors\');\n    container.innerHTML = \'\';\n    \n    if (highRiskFactors.length === 0) {\n        container.innerHTML = \'<p>No high-risk factors identified.</p>\';\n        return;\n    }\n    \n    highRiskFactors.forEach(factor => {\n        const factorElement = document.createElement(\'div\');\n        factorElement.className = \'high-risk-factor-item\';\n        \n        factorElement.innerHTML = `\n            <h4>${factor.name} (${factor.category})</h4>\n            <p><strong>Risk Score:</strong> ${factor.score} (Likelihood: ${factor.likelihood}, Impact: ${factor.impact})</p>\n            ${factor.notes ? `<p><strong>Notes:</strong> ${factor.notes}</p>` : \'\'}\n        `;\n        \n        container.appendChild(factorElement);\n    });\n}\n\n// Generate recommendations based on risk level\nfunction generateRecommendations(riskLevel, score) {\n    const container = document.getElementById(\'recommendations-container\');\n    container.innerHTML = \'\';\n    \n    let recommendations = \'\';\n    \n    switch (riskLevel) {\n        case \'Critical\':\n            recommendations = `\n                <p>With a Critical risk score of ${score}, immediate formal action is strongly recommended:</p>\n                <ul>\n                    <li>File a formal motion to recuse/disqualify immediately</li>\n                    <li>Consider motion to stay proceedings pending resolution</li>\n                    <li>Prepare detailed affidavit documenting all prejudice factors</li>\n                    <li>Consult with appellate counsel regarding potential mandamus relief</li>\n                    <li>Implement comprehensive documentation protocol for all interactions</li>\n                    <li>Prepare client for potential media interest and case delays</li>\n                </ul>\n                <p>Refer to the Practical Guide Section III.A for detailed guidance on Critical risk responses.</p>\n            `;\n            break;\n            \n        case \'High\':\n            recommendations = `\n                <p>With a High risk score of ${score}, urgent action is recommended:</p>\n                <ul>\n                    <li>File a motion to recuse/disqualify or for disclosure of potential conflicts</li>\n                    <li>Consider requesting a hearing on prejudice concerns</li>\n                    <li>Develop detailed documentation of all prejudice indicators</li>\n                    <li>Implement strategic adjustments to case presentation</li>\n                    <li>Prepare record for potential appeal on prejudice grounds</li>\n                </ul>\n                <p>Refer to the Practical Guide Section III.B for detailed guidance on High risk responses.</p>\n            `;\n            break;\n            \n        case \'Medium\':\n            recommendations = `\n                <p>With a Medium risk score of ${score}, prompt strategic response is recommended:</p>\n                <ul>\n                    <li>Enhance documentation of potential prejudice indicators</li>\n                    <li>Consider strategic motion practice to test for bias</li>\n                    <li>Modify case presentation approach to mitigate prejudice impact</li>\n                    <li>Request written rulings for significant decisions</li>\n                    <li>Preserve all procedural objections related to potential prejudice</li>\n                </ul>\n                <p>Refer to the Practical Guide Section III.C for detailed guidance on Medium risk responses.</p>\n            `;\n            break;\n            \n        case \'Low\':\n            recommendations = `\n                <p>With a Low risk score of ${score}, monitoring is recommended:</p>\n                <ul>\n                    <li>Document potential prejudice indicators as they arise</li>\n                    <li>Track rulings for emerging patterns</li>\n                    <li>Compare treatment with opposing party</li>\n                    <li>Maintain professional conduct to avoid escalation</li>\n                    <li>Reassess risk level periodically throughout proceedings</li>\n                </ul>\n                <p>Refer to the Practical Guide Section III.D for detailed guidance on Low risk responses.</p>\n            `;\n            break;\n            \n        default:\n            recommendations = \'<p>Please complete the assessment to receive recommendations.</p>\';\n    }\n    \n    container.innerHTML = recommendations;\n}\n\n// Initialize risk matrix visualization\nfunction initializeRiskMatrix() {\n    const matrixContainer = document.getElementById(\'risk-matrix-visualization\');\n    \n    // Create basic matrix structure\n    matrixContainer.innerHTML = `\n        <div style="width: 100%; height: 100%; display: flex; flex-direction: column; justify-content: center; align-items: center;">\n            <div style="font-size: 1.2rem; margin-bottom: 20px;">Complete the assessment to generate the risk matrix visualization</div>\n            <div style="width: 300px; height: 300px; position: relative; border: 1px solid #ddd;">\n                <!-- Matrix will be populated here -->\n            </div>\n        </div>\n    `;\n}\n\n// Update risk matrix with factor data\nfunction updateRiskMatrix(highRiskFactors) {\n    const matrixContainer = document.getElementById(\'risk-matrix-visualization\');\n    \n    // Create matrix HTML\n    let matrixHTML = `\n        <div style="width: 100%; height: 100%; display: flex; flex-direction: column;">\n            <div style="text-align: center; margin-bottom: 20px;">Risk Matrix Visualization</div>\n            <div style="flex-grow: 1; display: flex; flex-direction: column;">\n                <div style="display: flex; height: 100%;">\n                    <!-- Y-axis label -->\n                    <div style="writing-mode: vertical-rl; transform: rotate(180deg); text-align: center; padding: 10px;">\n                        Impact\n                    </div>\n                    \n                    <!-- Matrix grid -->\n                    <div style="flex-grow: 1; display: flex; flex-direction: column; border: 1px solid #ddd;">\n                        <!-- Row 5 (highest impact) -->\n                        <div style="flex-grow: 1; display: flex;">\n                            <div style="width: 20%; height: 100%; background-color: #FFF59D; border: 1px solid #ddd; display: flex; justify-content: center; align-items: center;" id="cell-1-5"></div>\n                            <div style="width: 20%; height: 100%; background-color: #FFCC80; border: 1px solid #ddd; display: flex; justify-content: center; align-items: center;" id="cell-2-5"></div>\n                            <div style="width: 20%; height: 100%; background-color: #FFAB91; border: 1px solid #ddd; display: flex; justify-content: center; align-items: center;" id="cell-3-5"></div>\n                            <div style="width: 20%; height: 100%; background-color: #FF8A65; border: 1px solid #ddd; display: flex; justify-content: center; align-items: center;" id="cell-4-5"></div>\n                            <div style="width: 20%; height: 100%; background-color: #FF5252; border: 1px solid #ddd; display: flex; justify-content: center; align-items: center;" id="cell-5-5"></div>\n                        </div>\n                        \n                        <!-- Row 4 -->\n                        <div style="flex-grow: 1; display: flex;">\n                            <div style="width: 20%; height: 100%; background-color: #FFF9C4; border: 1px solid #ddd; display: flex; justify-content: center; align-items: center;" id="cell-1-4"></div>\n                            <div style="width: 20%; height: 100%; background-color: #FFE0B2; border: 1px solid #ddd; display: flex; justify-content: center; align-items: center;" id="cell-2-4"></div>\n                            <div style="width: 20%; height: 100%; background-color: #FFCCBC; border: 1px solid #ddd; display: flex; justify-content: center; align-items: center;" id="cell-3-4"></div>\n                            <div style="width: 20%; height: 100%; background-color: #FFAB91; border: 1px solid #ddd; display: flex; justify-content: center; align-items: center;" id="cell-4-4"></div>\n                            <div style="width: 20%; height: 100%; background-color: #FF8A65; border: 1px solid #ddd; display: flex; justify-content: center; align-items: center;" id="cell-5-4"></div>\n                        </div>\n                        \n                        <!-- Row 3 -->\n                        <div style="flex-grow: 1; display: flex;">\n                            <div style="width: 20%; height: 100%; background-color: #FFFDE7; border: 1px solid #ddd; display: flex; justify-content: center; align-items: center;" id="cell-1-3"></div>\n                            <div style="width: 20%; height: 100%; background-color: #FFF9C4; border: 1px solid #ddd; display: flex; justify-content: center; align-items: center;" id="cell-2-3"></div>\n                            <div style="width: 20%; height: 100%; background-color: #FFE0B2; border: 1px solid #ddd; display: flex; justify-content: center; align-items: center;" id="cell-3-3"></div>\n                            <div style="width: 20%; height: 100%; background-color: #FFCCBC; border: 1px solid #ddd; display: flex; justify-content: center; align-items: center;" id="cell-4-3"></div>\n                            <div style="width: 20%; height: 100%; background-color: #FFAB91; border: 1px solid #ddd; display: flex; justify-content: center; align-items: center;" id="cell-5-3"></div>\n                        </div>\n                        \n                        <!-- Row 2 -->\n                        <div style="flex-grow: 1; display: flex;">\n                            <div style="width: 20%; height: 100%; background-color: #F5F5F5; border: 1px solid #ddd; display: flex; justify-content: center; align-items: center;" id="cell-1-2"></div>\n                            <div style="width: 20%; height: 100%; background-color: #FFFDE7; border: 1px solid #ddd; display: flex; justify-content: center; align-items: center;" id="cell-2-2"></div>\n                            <div style="width: 20%; height: 100%; background-color: #FFF9C4; border: 1px solid #ddd; display: flex; justify-content: center; align-items: center;" id="cell-3-2"></div>\n                            <div style="width: 20%; height: 100%; background-color: #FFE0B2; border: 1px solid #ddd; display: flex; justify-content: center; align-items: center;" id="cell-4-2"></div>\n                            <div style="width: 20%; height: 100%; background-color: #FFCCBC; border: 1px solid #ddd; display: flex; justify-content: center; align-items: center;" id="cell-5-2"></div>\n                        </div>\n                        \n                        <!-- Row 1 (lowest impact) -->\n                        <div style="flex-grow: 1; display: flex;">\n                            <div style="width: 20%; height: 100%; background-color: #F5F5F5; border: 1px solid #ddd; display: flex; justify-content: center; align-items: center;" id="cell-1-1"></div>\n                            <div style="width: 20%; height: 100%; background-color: #F5F5F5; border: 1px solid #ddd; display: flex; justify-content: center; align-items: center;" id="cell-2-1"></div>\n                            <div style="width: 20%; height: 100%; background-color: #FFFDE7; border: 1px solid #ddd; display: flex; justify-content: center; align-items: center;" id="cell-3-1"></div>\n                            <div style="width: 20%; height: 100%; background-color: #FFF9C4; border: 1px solid #ddd; display: flex; justify-content: center; align-items: center;" id="cell-4-1"></div>\n                            <div style="width: 20%; height: 100%; background-color: #FFE0B2; border: 1px solid #ddd; display: flex; justify-content: center; align-items: center;" id="cell-5-1"></div>\n                        </div>\n                    </div>\n                </div>\n                \n                <!-- X-axis label -->\n                <div style="text-align: center; padding: 10px;">Likelihood</div>\n                \n                <!-- Legend -->\n                <div style="display: flex; justify-content: center; margin-top: 20px;">\n                    <div style="margin: 0 10px;"><span style="display: inline-block; width: 20px; height: 20px; background-color: #F5F5F5; border: 1px solid #ddd;"></span> Low (1-7)</div>\n                    <div style="margin: 0 10px;"><span style="display: inline-block; width: 20px; height: 20px; background-color: #FFF9C4; border: 1px solid #ddd;"></span> Medium (8-14)</div>\n                    <div style="margin: 0 10px;"><span style="display: inline-block; width: 20px; height: 20px; background-color: #FFAB91; border: 1px solid #ddd;"></span> High (15-19)</div>\n                    <div style="margin: 0 10px;"><span style="display: inline-block; width: 20px; height: 20px; background-color: #FF5252; border: 1px solid #ddd;"></span> Critical (20-25)</div>\n                </div>\n            </div>\n        </div>\n    `;\n    \n    matrixContainer.innerHTML = matrixHTML;\n    \n    // Plot factors on the matrix\n    const allFactors = getAllFactorScores();\n    \n    allFactors.forEach(factor => {\n        const cellId = `cell-${factor.likelihood}-${factor.impact}`;\n        const cell = document.getElementById(cellId);\n        \n        if (cell) {\n            // Create a dot representing the factor\n            const dot = document.createElement(\'div\');\n            dot.style.width = \'10px\';\n            dot.style.height = \'10px\';\n            dot.style.borderRadius = \'50%\';\n            dot.style.backgroundColor = \'#333\';\n            dot.style.margin = \'2px\';\n            dot.title = `${factor.name} (${factor.category}): Score ${factor.score}`;\n            \n            cell.appendChild(dot);\n        }\n    });\n}\n\n// Reset the entire form\nfunction resetForm() {\n    // Reset all radio buttons\n    document.querySelectorAll(\'input[type="radio"]\').forEach(radio => {\n        radio.checked = false;\n    });\n    \n    // Reset all textareas\n    document.querySelectorAll(\'textarea\').forEach(textarea => {\n        textarea.value = \'\';\n    });\n    \n    // Reset case info\n    document.getElementById(\'case-name\').value = \'\';\n    document.getElementById(\'judge-name\').value = \'\';\n    document.getElementById(\'assessor-name\').value = \'\';\n    \n    // Reset date to current date\n    const today = new Date().toISOString().split(\'T\')[0];\n    document.getElementById(\'assessment-date\').value = today;\n    \n    // Reset results\n    document.getElementById(\'overall-risk-score\').querySelector(\'.score-value\').textContent = \'--\';\n    document.getElementById(\'risk-level\').querySelector(\'.level-value\').textContent = \'--\';\n    document.getElementById(\'relationship-score\').textContent = \'--\';\n    document.getElementById(\'conduct-score\').textContent = \'--\';\n    document.getElementById(\'contextual-score\').textContent = \'--\';\n    \n    // Reset recommendations\n    document.getElementById(\'recommendations-container\').innerHTML = \'<p>Complete the assessment to receive recommendations.</p>\';\n    \n    // Reset high risk factors\n    document.getElementById(\'high-risk-factors\').innerHTML = \'<p>Complete the assessment to identify high-risk factors.</p>\';\n    \n    // Reset risk matrix\n    initializeRiskMatrix();\n    \n    // Return to first tab\n    document.querySelectorAll(\'.tab-btn\').forEach(btn => btn.classList.remove(\'active\'));\n    document.querySelectorAll(\'.tab-pane\').forEach(pane => pane.classList.remove(\'active\'));\n    document.querySelector(\'.tab-btn[data-tab="relationship"]\').classList.add(\'active\');\n    document.getElementById(\'relationship\').classList.add(\'active\');\n}\n</create-file>\n</function_calls>', 'tool_calls': None}