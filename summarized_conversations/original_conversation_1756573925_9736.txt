{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="docs_new/assets/js/main.js">\n/**\n * Legal Prejudice Analysis Documentation - Main JavaScript\n */\n\ndocument.addEventListener(\'DOMContentLoaded\', function() {\n    // Sidebar toggle for mobile\n    const sidebarToggle = document.querySelector(\'.sidebar-toggle\');\n    const sidebar = document.querySelector(\'.sidebar\');\n    \n    if (sidebarToggle) {\n        sidebarToggle.addEventListener(\'click\', function() {\n            sidebar.classList.toggle(\'open\');\n        });\n    }\n    \n    // Close sidebar when clicking outside on mobile\n    document.addEventListener(\'click\', function(event) {\n        const isClickInsideSidebar = sidebar.contains(event.target);\n        const isClickOnToggle = sidebarToggle.contains(event.target);\n        \n        if (!isClickInsideSidebar && !isClickOnToggle && sidebar.classList.contains(\'open\')) {\n            sidebar.classList.remove(\'open\');\n        }\n    });\n    \n    // Submenu toggle\n    const submenuItems = document.querySelectorAll(\'.has-submenu > .nav-link\');\n    \n    submenuItems.forEach(function(item) {\n        item.addEventListener(\'click\', function(e) {\n            e.preventDefault();\n            const parent = this.parentElement;\n            \n            // Close all other open submenus\n            const openItems = document.querySelectorAll(\'.has-submenu.open\');\n            openItems.forEach(function(openItem) {\n                if (openItem !== parent) {\n                    openItem.classList.remove(\'open\');\n                }\n            });\n            \n            // Toggle current submenu\n            parent.classList.toggle(\'open\');\n        });\n    });\n    \n    // Auto-expand current page\'s parent menu\n    const currentPageUrl = window.location.pathname;\n    const currentLink = document.querySelector(`.nav-link[href="${currentPageUrl}"]`);\n    \n    if (currentLink) {\n        currentLink.classList.add(\'active\');\n        \n        // Find parent submenu if exists\n        const parentSubmenu = currentLink.closest(\'.submenu\');\n        if (parentSubmenu) {\n            const parentItem = parentSubmenu.closest(\'.has-submenu\');\n            parentItem.classList.add(\'open\');\n        }\n    }\n    \n    // Print button functionality\n    const printButton = document.getElementById(\'print-button\');\n    if (printButton) {\n        printButton.addEventListener(\'click\', function() {\n            window.print();\n        });\n    }\n    \n    // Code highlighting is handled by Prism.js which is loaded separately\n    \n    // Handle anchor links with smooth scrolling\n    document.querySelectorAll(\'a[href^="#"]\').forEach(anchor => {\n        anchor.addEventListener(\'click\', function(e) {\n            const targetId = this.getAttribute(\'href\');\n            \n            // Skip if it\'s a submenu toggle\n            if (this.parentElement.classList.contains(\'has-submenu\')) {\n                return;\n            }\n            \n            if (targetId === \'#\') {\n                e.preventDefault();\n                return;\n            }\n            \n            const targetElement = document.querySelector(targetId);\n            \n            if (targetElement) {\n                e.preventDefault();\n                \n                targetElement.scrollIntoView({\n                    behavior: \'smooth\',\n                    block: \'start\'\n                });\n                \n                // Update URL without page reload\n                history.pushState(null, null, targetId);\n            }\n        });\n    });\n    \n    // Handle external links\n    document.querySelectorAll(\'a[href^="http"]\').forEach(link => {\n        // Skip links that already have target attribute\n        if (!link.getAttribute(\'target\')) {\n            link.setAttribute(\'target\', \'_blank\');\n            link.setAttribute(\'rel\', \'noopener noreferrer\');\n        }\n    });\n    \n    // Add copy button to code blocks\n    document.querySelectorAll(\'pre\').forEach(block => {\n        // Skip if already has copy button\n        if (block.querySelector(\'.copy-button\')) {\n            return;\n        }\n        \n        const button = document.createElement(\'button\');\n        button.className = \'copy-button\';\n        button.innerHTML = \'<i class="fas fa-copy"></i>\';\n        button.title = \'Copy to clipboard\';\n        \n        block.style.position = \'relative\';\n        block.appendChild(button);\n        \n        button.addEventListener(\'click\', () => {\n            const code = block.querySelector(\'code\').innerText;\n            navigator.clipboard.writeText(code).then(() => {\n                button.innerHTML = \'<i class="fas fa-check"></i>\';\n                button.classList.add(\'copied\');\n                \n                setTimeout(() => {\n                    button.innerHTML = \'<i class="fas fa-copy"></i>\';\n                    button.classList.remove(\'copied\');\n                }, 2000);\n            });\n        });\n    });\n    \n    // Add table of contents for long pages\n    const headings = document.querySelectorAll(\'.content h2, .content h3\');\n    const contentElement = document.querySelector(\'.content\');\n    \n    if (headings.length > 3 && contentElement) {\n        const tocContainer = document.createElement(\'div\');\n        tocContainer.className = \'table-of-contents\';\n        tocContainer.innerHTML = \'<h2>Table of Contents</h2><ul class="toc-list"></ul>\';\n        \n        const tocList = tocContainer.querySelector(\'.toc-list\');\n        \n        headings.forEach((heading, index) => {\n            // Add ID to heading if it doesn\'t have one\n            if (!heading.id) {\n                heading.id = `heading-${index}`;\n            }\n            \n            const listItem = document.createElement(\'li\');\n            listItem.className = heading.tagName.toLowerCase();\n            \n            const link = document.createElement(\'a\');\n            link.href = `#${heading.id}`;\n            link.textContent = heading.textContent;\n            \n            listItem.appendChild(link);\n            tocList.appendChild(listItem);\n        });\n        \n        // Insert after first h1 or at the beginning\n        const firstHeading = document.querySelector(\'.content h1\');\n        if (firstHeading) {\n            firstHeading.after(tocContainer);\n        } else {\n            contentElement.prepend(tocContainer);\n        }\n    }\n    \n    // Handle responsive tables\n    document.querySelectorAll(\'table\').forEach(table => {\n        if (!table.parentElement.classList.contains(\'table-responsive\')) {\n            const wrapper = document.createElement(\'div\');\n            wrapper.className = \'table-responsive\';\n            table.parentNode.insertBefore(wrapper, table);\n            wrapper.appendChild(table);\n        }\n    });\n    \n    // Add active class to current section based on scroll position\n    function setActiveSection() {\n        const sections = document.querySelectorAll(\'h2[id], h3[id]\');\n        let currentSection = \'\';\n        \n        sections.forEach(section => {\n            const sectionTop = section.offsetTop;\n            const sectionHeight = section.offsetHeight;\n            \n            if (window.scrollY >= sectionTop - 100) {\n                currentSection = section.getAttribute(\'id\');\n            }\n        });\n        \n        if (currentSection) {\n            // Remove active class from all TOC links\n            document.querySelectorAll(\'.toc-list a\').forEach(link => {\n                link.classList.remove(\'active\');\n            });\n            \n            // Add active class to current section link\n            const activeLink = document.querySelector(`.toc-list a[href="#${currentSection}"]`);\n            if (activeLink) {\n                activeLink.classList.add(\'active\');\n            }\n        }\n    }\n    \n    // Update active section on scroll\n    window.addEventListener(\'scroll\', setActiveSection);\n    \n    // Initialize active section\n    setActiveSection();\n});\n</create-file>\n</function_calls>', 'tool_calls': None}