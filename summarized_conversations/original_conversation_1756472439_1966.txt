{'role': 'assistant', 'content': 'Now, let\'s create a production configuration file for our API server:\n\n<function_calls>\n<create-file file_path="prejudice_risk_calculator/production_setup/config.py">\n"""\nConfiguration settings for the Legal Prejudice Risk Calculator API Server\n"""\n\nimport os\nfrom datetime import timedelta\n\n# Load environment variables from .env file if present\nfrom dotenv import load_dotenv\nload_dotenv()\n\nclass Config:\n    """Base configuration class"""\n    # Application settings\n    APP_NAME = "Legal Prejudice Risk Calculator API"\n    API_VERSION = "v1"\n    API_PREFIX = f"/api/{API_VERSION}"\n    \n    # Security settings\n    SECRET_KEY = os.environ.get("SECRET_KEY") or "dev-key-please-change-in-production"\n    JWT_SECRET_KEY = os.environ.get("JWT_SECRET_KEY") or SECRET_KEY\n    JWT_ACCESS_TOKEN_EXPIRES = timedelta(hours=1)\n    JWT_REFRESH_TOKEN_EXPIRES = timedelta(days=30)\n    \n    # CORS settings\n    CORS_ORIGINS = os.environ.get("CORS_ORIGINS", "*").split(",")\n    \n    # Database settings\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n    \n    # Logging settings\n    LOG_LEVEL = os.environ.get("LOG_LEVEL", "INFO")\n    \n    # Rate limiting\n    RATELIMIT_DEFAULT = "100 per minute"\n    RATELIMIT_STORAGE_URL = os.environ.get("REDIS_URL", "memory://")\n    \n    # Webhook settings\n    WEBHOOK_RETRY_ATTEMPTS = 6\n    WEBHOOK_RETRY_DELAYS = [60, 300, 900, 1800, 3600, 10800]  # in seconds\n    \n    # Feature flags\n    ENABLE_WEBHOOKS = os.environ.get("ENABLE_WEBHOOKS", "true").lower() == "true"\n    ENABLE_METRICS = os.environ.get("ENABLE_METRICS", "true").lower() == "true"\n    \n    # Monitoring\n    SENTRY_DSN = os.environ.get("SENTRY_DSN", None)\n\n\nclass DevelopmentConfig(Config):\n    """Development configuration"""\n    DEBUG = True\n    SQLALCHEMY_DATABASE_URI = os.environ.get("DATABASE_URL") or "sqlite:///dev.db"\n    \n    # Override rate limiting for development\n    RATELIMIT_DEFAULT = "1000 per minute"\n    \n    # Disable certain security features in development\n    JWT_ACCESS_TOKEN_EXPIRES = timedelta(days=1)\n\n\nclass TestingConfig(Config):\n    """Testing configuration"""\n    TESTING = True\n    SQLALCHEMY_DATABASE_URI = os.environ.get("TEST_DATABASE_URL") or "sqlite:///:memory:"\n    \n    # Disable rate limiting for tests\n    RATELIMIT_ENABLED = False\n    \n    # Use faster hashing for tests\n    BCRYPT_LOG_ROUNDS = 4\n    \n    # Disable webhooks in tests by default\n    ENABLE_WEBHOOKS = False\n\n\nclass ProductionConfig(Config):\n    """Production configuration"""\n    DEBUG = False\n    TESTING = False\n    \n    # Ensure these are set in production\n    SQLALCHEMY_DATABASE_URI = os.environ.get("DATABASE_URL")\n    SECRET_KEY = os.environ.get("SECRET_KEY")\n    JWT_SECRET_KEY = os.environ.get("JWT_SECRET_KEY")\n    \n    # Stricter security settings\n    CORS_ORIGINS = os.environ.get("CORS_ORIGINS", "").split(",")\n    \n    # Enable SSL if not behind proxy\n    SSL_REDIRECT = os.environ.get("SSL_REDIRECT", "false").lower() == "true"\n    \n    # Production logging\n    LOG_LEVEL = os.environ.get("LOG_LEVEL", "WARNING")\n    \n    # Production rate limiting\n    RATELIMIT_DEFAULT = os.environ.get("RATELIMIT_DEFAULT", "100 per minute")\n    \n    @classmethod\n    def init_app(cls, app):\n        """Initialize production application"""\n        # Log to stderr\n        import logging\n        from logging import StreamHandler\n        file_handler = StreamHandler()\n        file_handler.setLevel(logging.INFO)\n        app.logger.addHandler(file_handler)\n        \n        # Enable ProxyFix if behind proxy\n        if os.environ.get("BEHIND_PROXY", "false").lower() == "true":\n            from werkzeug.middleware.proxy_fix import ProxyFix\n            app.wsgi_app = ProxyFix(\n                app.wsgi_app, \n                x_for=int(os.environ.get("PROXY_X_FOR", 1)),\n                x_proto=int(os.environ.get("PROXY_X_PROTO", 1)),\n                x_host=int(os.environ.get("PROXY_X_HOST", 0)),\n                x_port=int(os.environ.get("PROXY_X_PORT", 0)),\n                x_prefix=int(os.environ.get("PROXY_X_PREFIX", 0))\n            )\n        \n        # Enable Sentry if configured\n        if cls.SENTRY_DSN:\n            import sentry_sdk\n            from sentry_sdk.integrations.flask import FlaskIntegration\n            \n            sentry_sdk.init(\n                dsn=cls.SENTRY_DSN,\n                integrations=[FlaskIntegration()],\n                traces_sample_rate=float(os.environ.get("SENTRY_TRACES_SAMPLE_RATE", 0.1)),\n                environment=os.environ.get("ENVIRONMENT", "production")\n            )\n\n\n# Configuration dictionary\nconfig = {\n    \'development\': DevelopmentConfig,\n    \'testing\': TestingConfig,\n    \'production\': ProductionConfig,\n    \'default\': DevelopmentConfig\n}\n</create-file>\n</function_calls>', 'tool_calls': None}