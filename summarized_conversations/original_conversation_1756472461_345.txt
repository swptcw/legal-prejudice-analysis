{'role': 'assistant', 'content': 'Let\'s create a deployment script to help with setting up the production environment:\n\n<function_calls>\n<create-file file_path="prejudice_risk_calculator/production_setup/deploy.sh">\n#!/bin/bash\n# Deployment script for Legal Prejudice Risk Calculator API\n\nset -e  # Exit on error\n\n# Print colored messages\nprint_message() {\n    echo -e "\\e[1;34m$1\\e[0m"\n}\n\nprint_success() {\n    echo -e "\\e[1;32m$1\\e[0m"\n}\n\nprint_error() {\n    echo -e "\\e[1;31m$1\\e[0m"\n}\n\nprint_warning() {\n    echo -e "\\e[1;33m$1\\e[0m"\n}\n\n# Check if Docker and Docker Compose are installed\ncheck_dependencies() {\n    print_message "Checking dependencies..."\n    \n    if ! command -v docker &> /dev/null; then\n        print_error "Docker is not installed. Please install Docker first."\n        exit 1\n    fi\n    \n    if ! command -v docker-compose &> /dev/null; then\n        print_error "Docker Compose is not installed. Please install Docker Compose first."\n        exit 1\n    fi\n    \n    print_success "All dependencies are installed."\n}\n\n# Generate environment variables\ngenerate_env_file() {\n    print_message "Generating environment variables..."\n    \n    if [ -f .env ]; then\n        print_warning ".env file already exists. Do you want to overwrite it? (y/n)"\n        read -r overwrite\n        if [ "$overwrite" != "y" ]; then\n            print_message "Keeping existing .env file."\n            return\n        fi\n    fi\n    \n    # Generate random passwords and keys\n    DB_PASSWORD=$(openssl rand -base64 32 | tr -dc \'a-zA-Z0-9\' | fold -w 32 | head -n 1)\n    SECRET_KEY=$(openssl rand -base64 64 | tr -dc \'a-zA-Z0-9\' | fold -w 64 | head -n 1)\n    JWT_SECRET_KEY=$(openssl rand -base64 64 | tr -dc \'a-zA-Z0-9\' | fold -w 64 | head -n 1)\n    \n    # Create .env file\n    cat > .env << EOF\n# Database\nDB_PASSWORD=$DB_PASSWORD\n\n# Security\nSECRET_KEY=$SECRET_KEY\nJWT_SECRET_KEY=$JWT_SECRET_KEY\n\n# CORS\nCORS_ORIGINS=*\n\n# Environment\nFLASK_ENV=production\nFLASK_CONFIG=production\nEOF\n    \n    print_success ".env file generated."\n}\n\n# Create SSL certificates for development\ngenerate_ssl_certs() {\n    print_message "Generating self-signed SSL certificates for development..."\n    \n    mkdir -p nginx/ssl\n    \n    if [ -f nginx/ssl/server.crt ] && [ -f nginx/ssl/server.key ]; then\n        print_warning "SSL certificates already exist. Do you want to regenerate them? (y/n)"\n        read -r regenerate\n        if [ "$regenerate" != "y" ]; then\n            print_message "Keeping existing SSL certificates."\n            return\n        fi\n    fi\n    \n    # Generate self-signed certificate\n    openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n        -keyout nginx/ssl/server.key -out nginx/ssl/server.crt \\\n        -subj "/C=US/ST=State/L=City/O=Organization/CN=api.prejudicerisk.example.com"\n    \n    print_success "Self-signed SSL certificates generated."\n    print_warning "Note: These are self-signed certificates for development only. Use proper certificates for production."\n}\n\n# Create static files directory\ncreate_static_files() {\n    print_message "Creating static files directory..."\n    \n    mkdir -p static\n    \n    # Create a simple index.html\n    cat > static/index.html << EOF\n<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Legal Prejudice Risk Calculator API</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            line-height: 1.6;\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n            color: #333;\n        }\n        h1 {\n            color: #2c3e50;\n            border-bottom: 2px solid #3498db;\n            padding-bottom: 10px;\n        }\n        .api-info {\n            background-color: #f8f9fa;\n            border-left: 4px solid #3498db;\n            padding: 15px;\n            margin: 20px 0;\n        }\n        .footer {\n            margin-top: 40px;\n            border-top: 1px solid #ddd;\n            padding-top: 10px;\n            font-size: 0.9em;\n            color: #777;\n        }\n    </style>\n</head>\n<body>\n    <h1>Legal Prejudice Risk Calculator API</h1>\n    \n    <div class="api-info">\n        <p>The API is running and available at <code>/api/v1</code>.</p>\n        <p>For API documentation, visit <a href="/api/v1/docs">/api/v1/docs</a>.</p>\n    </div>\n    \n    <p>This API provides endpoints for managing prejudice risk assessments, including:</p>\n    \n    <ul>\n        <li>Creating and managing assessments</li>\n        <li>Submitting factor ratings</li>\n        <li>Calculating risk scores</li>\n        <li>Integrating with case management systems</li>\n        <li>Webhook notifications for real-time updates</li>\n    </ul>\n    \n    <p>For more information, please refer to the API documentation.</p>\n    \n    <div class="footer">\n        <p>Legal Prejudice Risk Calculator API &copy; 2025</p>\n    </div>\n</body>\n</html>\nEOF\n    \n    # Create error pages\n    cat > static/404.html << EOF\n<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>404 - Page Not Found</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            line-height: 1.6;\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n            color: #333;\n            text-align: center;\n        }\n        h1 {\n            color: #e74c3c;\n            font-size: 3em;\n            margin-bottom: 10px;\n        }\n        .error-container {\n            background-color: #f8f9fa;\n            border-radius: 8px;\n            padding: 20px;\n            margin: 20px 0;\n        }\n        .back-link {\n            display: inline-block;\n            margin-top: 20px;\n            padding: 10px 20px;\n            background-color: #3498db;\n            color: white;\n            text-decoration: none;\n            border-radius: 4px;\n        }\n        .back-link:hover {\n            background-color: #2980b9;\n        }\n    </style>\n</head>\n<body>\n    <div class="error-container">\n        <h1>404</h1>\n        <h2>Page Not Found</h2>\n        <p>The page you are looking for does not exist or has been moved.</p>\n        <a href="/" class="back-link">Go to Homepage</a>\n    </div>\n</body>\n</html>\nEOF\n    \n    cat > static/50x.html << EOF\n<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Server Error</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            line-height: 1.6;\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n            color: #333;\n            text-align: center;\n        }\n        h1 {\n            color: #e74c3c;\n            font-size: 3em;\n            margin-bottom: 10px;\n        }\n        .error-container {\n            background-color: #f8f9fa;\n            border-radius: 8px;\n            padding: 20px;\n            margin: 20px 0;\n        }\n        .back-link {\n            display: inline-block;\n            margin-top: 20px;\n            padding: 10px 20px;\n            background-color: #3498db;\n            color: white;\n            text-decoration: none;\n            border-radius: 4px;\n        }\n        .back-link:hover {\n            background-color: #2980b9;\n        }\n    </style>\n</head>\n<body>\n    <div class="error-container">\n        <h1>500</h1>\n        <h2>Server Error</h2>\n        <p>Something went wrong on our end. Please try again later.</p>\n        <a href="/" class="back-link">Go to Homepage</a>\n    </div>\n</body>\n</html>\nEOF\n    \n    print_success "Static files created."\n}\n\n# Create logs directory\ncreate_logs_directory() {\n    print_message "Creating logs directory..."\n    mkdir -p logs\n    print_success "Logs directory created."\n}\n\n# Build and start containers\nstart_services() {\n    print_message "Building and starting services..."\n    docker-compose build\n    docker-compose up -d\n    print_success "Services started."\n}\n\n# Initialize database\ninitialize_database() {\n    print_message "Initializing database..."\n    \n    # Wait for database to be ready\n    print_message "Waiting for database to be ready..."\n    sleep 10\n    \n    # Run migrations\n    print_message "Running database migrations..."\n    docker-compose exec api flask db upgrade\n    \n    # Seed initial data\n    print_message "Seeding initial data..."\n    docker-compose exec api python -c "from app import create_app, db; from models import FactorDefinition; app = create_app(); with app.app_context(): db.create_all()"\n    \n    print_success "Database initialized."\n}\n\n# Create initial admin API key\ncreate_admin_api_key() {\n    print_message "Creating initial admin API key..."\n    \n    # Generate API key\n    API_KEY=$(docker-compose exec api python -c "import secrets; print(f\'prfk_{secrets.token_urlsafe(32)}\')")\n    \n    # Create API key in database\n    docker-compose exec api python -c "from app import create_app, db; from models import APIKey; import hashlib, datetime, uuid; app = create_app(); with app.app_context(): key = APIKey(key_id=str(uuid.uuid4()), key_hash=hashlib.sha256(\'$API_KEY\'.encode()).hexdigest(), name=\'Initial Admin Key\', description=\'Created during deployment\', created_by=\'deploy.sh\', is_active=True, created_at=datetime.datetime.utcnow(), updated_at=datetime.datetime.utcnow()); db.session.add(key); db.session.commit()"\n    \n    print_success "Initial admin API key created: $API_KEY"\n    print_warning "Make sure to save this API key as it won\'t be shown again."\n}\n\n# Show deployment info\nshow_info() {\n    print_message "Deployment completed successfully!"\n    print_message "API is available at: https://api.prejudicerisk.example.com/api/v1"\n    print_message "Health check endpoint: https://api.prejudicerisk.example.com/health"\n    print_message "API documentation: https://api.prejudicerisk.example.com/api/v1/docs"\n    \n    print_warning "Note: You need to configure your DNS to point api.prejudicerisk.example.com to your server."\n    print_warning "For production use, replace the self-signed SSL certificates with proper ones."\n}\n\n# Main deployment process\nmain() {\n    print_message "Starting deployment of Legal Prejudice Risk Calculator API..."\n    \n    check_dependencies\n    generate_env_file\n    generate_ssl_certs\n    create_static_files\n    create_logs_directory\n    start_services\n    initialize_database\n    create_admin_api_key\n    show_info\n}\n\n# Run the main function\nmain\n</create-file>\n</function_calls>', 'tool_calls': None}