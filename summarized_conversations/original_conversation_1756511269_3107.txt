{'role': 'assistant', 'content': 'Let\'s create a README file for the Docker directory to guide users on how to use the Docker deployment:\n\n<function_calls>\n<create-file file_path="docker/README.md">\n# Docker Deployment for Legal Prejudice Analysis Project\n\nThis directory contains all the necessary Docker configuration files to deploy the complete Legal Prejudice Analysis system, including the web calculator, API server, and supporting services.\n\n## Prerequisites\n\n- [Docker](https://docs.docker.com/get-docker/) (version 20.10.0 or higher)\n- [Docker Compose](https://docs.docker.com/compose/install/) (version 2.0.0 or higher)\n- At least 2GB of available RAM\n- At least 1GB of free disk space\n\n## Quick Start\n\nTo deploy the entire system with a single command:\n\n```bash\ndocker-compose up -d\n```\n\nThis will:\n1. Pull or build all required Docker images\n2. Create necessary networks and volumes\n3. Start all services in the correct order\n4. Configure the system for immediate use\n\nOnce deployed, you can access:\n- Web Calculator: http://localhost:8080\n- API Documentation: http://localhost:8080/api/docs\n- Admin Interface: http://localhost:8080/admin (default credentials in .env file)\n\n## Configuration\n\n### Environment Variables\n\nCopy the example environment file and modify as needed:\n\n```bash\ncp .env.example .env\n```\n\nEdit the `.env` file to configure:\n- Database credentials\n- API keys and secrets\n- External service connections\n- Feature toggles\n- Logging levels\n\n### Volumes\n\nThe following Docker volumes are created to persist data:\n\n- `legal_prejudice_db_data`: Database storage\n- `legal_prejudice_uploads`: User uploaded files\n- `legal_prejudice_logs`: Application logs\n\n## Component Services\n\n### Web Frontend\n\nThe web calculator and user interface:\n- Image: `legal-prejudice/web-frontend`\n- Ports: 80 (internal)\n- Environment variables: See `web-frontend.env.example`\n\n### API Server\n\nThe backend API service:\n- Image: `legal-prejudice/api-server`\n- Ports: 5000 (internal)\n- Environment variables: See `api-server.env.example`\n- Healthcheck: `/health` endpoint\n\n### Database\n\nPostgreSQL database for storing assessment data:\n- Image: `postgres:14-alpine`\n- Ports: 5432 (internal)\n- Environment variables: See `database.env.example`\n- Volumes: `legal_prejudice_db_data`\n\n### Nginx\n\nReverse proxy for routing and SSL termination:\n- Image: `nginx:alpine`\n- Ports: 8080:80 (external:internal)\n- Configuration: `./nginx/conf.d/`\n\n## Scaling and Production Use\n\nFor production deployments, consider:\n\n1. **SSL Configuration**:\n   - Place SSL certificates in `./nginx/certs/`\n   - Update `nginx/conf.d/default.conf` to enable HTTPS\n\n2. **Database Backup**:\n   - Use the provided backup script: `./scripts/backup-db.sh`\n   - Configure automated backups in your environment\n\n3. **Horizontal Scaling**:\n   - API servers can be scaled with `docker-compose up -d --scale api-server=3`\n   - Ensure database is properly configured for multiple connections\n\n4. **Monitoring**:\n   - Prometheus metrics available at `/metrics` endpoint\n   - Sample Grafana dashboards in `./monitoring/dashboards/`\n\n## Troubleshooting\n\n### Viewing Logs\n\n```bash\n# View logs for all services\ndocker-compose logs\n\n# View logs for a specific service\ndocker-compose logs api-server\n\n# Follow logs in real-time\ndocker-compose logs -f\n```\n\n### Common Issues\n\n1. **Database Connection Errors**:\n   - Check database credentials in `.env` file\n   - Ensure database service is running: `docker-compose ps`\n\n2. **Web Interface Not Loading**:\n   - Check nginx logs: `docker-compose logs nginx`\n   - Verify web-frontend is running: `docker-compose ps web-frontend`\n\n3. **API Errors**:\n   - Check API server logs: `docker-compose logs api-server`\n   - Verify database migrations have run successfully\n\n### Resetting the Environment\n\nTo completely reset the environment (will delete all data):\n\n```bash\ndocker-compose down -v\ndocker-compose up -d\n```\n\n## Updating\n\nTo update to the latest version:\n\n```bash\ngit pull\ndocker-compose down\ndocker-compose pull\ndocker-compose up -d\n```\n\nFor major version upgrades, please refer to the migration guide in the documentation.\n\n## Security Considerations\n\n- Default credentials are for development only\n- Change all passwords in production\n- Consider using Docker secrets for sensitive information\n- Review and adjust file permissions as needed\n- Enable SSL for all production deployments\n</create-file>\n</function_calls>', 'tool_calls': None}