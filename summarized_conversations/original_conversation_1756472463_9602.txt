{'role': 'assistant', 'content': 'Finally, let\'s create a README file for the production setup:\n\n<function_calls>\n<create-file file_path="prejudice_risk_calculator/production_setup/README.md">\n# Legal Prejudice Risk Calculator API\n## Production Setup Guide\n\nThis guide provides instructions for deploying the Legal Prejudice Risk Calculator API in a production environment using Docker and Docker Compose.\n\n## Table of Contents\n\n1. [Prerequisites](#prerequisites)\n2. [Directory Structure](#directory-structure)\n3. [Deployment Steps](#deployment-steps)\n4. [Manual Configuration](#manual-configuration)\n5. [Monitoring and Maintenance](#monitoring-and-maintenance)\n6. [Backup and Recovery](#backup-and-recovery)\n7. [Troubleshooting](#troubleshooting)\n\n## Prerequisites\n\nBefore deploying the API, ensure you have the following:\n\n- A server with at least 2GB RAM and 1 CPU core\n- Docker (version 20.10.0 or later)\n- Docker Compose (version 2.0.0 or later)\n- Domain name configured to point to your server (for production use)\n- SSL certificates (for production use)\n\n## Directory Structure\n\nThe production setup has the following structure:\n\n```\nproduction_setup/\n├── app.py                 # Main application file\n├── config.py              # Configuration settings\n├── deploy.sh              # Deployment script\n├── docker-compose.yml     # Docker Compose configuration\n├── Dockerfile             # Docker image definition\n├── migrations/            # Database migrations\n├── models.py              # Database models\n├── nginx/                 # Nginx configuration\n│   └── conf.d/            # Nginx site configuration\n│       └── default.conf   # Default site configuration\n├── README.md              # This file\n├── requirements.txt       # Python dependencies\n├── routes/                # API routes\n│   ├── assessments.py     # Assessment routes\n│   ├── auth.py            # Authentication routes\n│   ├── cms.py             # CMS integration routes\n│   ├── factors.py         # Factor routes\n│   ├── results.py         # Results routes\n│   └── webhooks.py        # Webhook routes\n└── utils/                 # Utility functions\n    ├── auth.py            # Authentication utilities\n    ├── events.py          # Event handling utilities\n    └── validation.py      # Validation utilities\n```\n\n## Deployment Steps\n\n### Automated Deployment\n\nThe easiest way to deploy the API is using the provided deployment script:\n\n```bash\n./deploy.sh\n```\n\nThis script will:\n\n1. Check for required dependencies\n2. Generate environment variables\n3. Create self-signed SSL certificates (for development)\n4. Create static files and error pages\n5. Build and start the Docker containers\n6. Initialize the database\n7. Create an initial admin API key\n\n### Manual Deployment\n\nIf you prefer to deploy manually, follow these steps:\n\n1. **Create environment variables**\n\n   Create a `.env` file with the following variables:\n\n   ```\n   # Database\n   DB_PASSWORD=<strong-password>\n\n   # Security\n   SECRET_KEY=<random-string>\n   JWT_SECRET_KEY=<random-string>\n\n   # CORS\n   CORS_ORIGINS=*\n   ```\n\n2. **Configure SSL certificates**\n\n   For production, place your SSL certificates in the `nginx/ssl` directory:\n   - `server.crt`: SSL certificate\n   - `server.key`: SSL private key\n\n   For development, you can generate self-signed certificates:\n\n   ```bash\n   mkdir -p nginx/ssl\n   openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n       -keyout nginx/ssl/server.key -out nginx/ssl/server.crt \\\n       -subj "/C=US/ST=State/L=City/O=Organization/CN=api.prejudicerisk.example.com"\n   ```\n\n3. **Create static files directory**\n\n   ```bash\n   mkdir -p static\n   # Create index.html and error pages\n   ```\n\n4. **Create logs directory**\n\n   ```bash\n   mkdir -p logs\n   ```\n\n5. **Build and start containers**\n\n   ```bash\n   docker-compose build\n   docker-compose up -d\n   ```\n\n6. **Initialize database**\n\n   ```bash\n   # Wait for database to be ready\n   sleep 10\n   \n   # Run migrations\n   docker-compose exec api flask db upgrade\n   \n   # Seed initial data\n   docker-compose exec api python -c "from app import create_app, db; from models import FactorDefinition; app = create_app(); with app.app_context(): db.create_all()"\n   ```\n\n7. **Create initial admin API key**\n\n   ```bash\n   # Generate API key\n   API_KEY=$(docker-compose exec api python -c "import secrets; print(f\'prfk_{secrets.token_urlsafe(32)}\')")\n   \n   # Create API key in database\n   docker-compose exec api python -c "from app import create_app, db; from models import APIKey; import hashlib, datetime, uuid; app = create_app(); with app.app_context(): key = APIKey(key_id=str(uuid.uuid4()), key_hash=hashlib.sha256(\'$API_KEY\'.encode()).hexdigest(), name=\'Initial Admin Key\', description=\'Created during deployment\', created_by=\'manual\', is_active=True, created_at=datetime.datetime.utcnow(), updated_at=datetime.datetime.utcnow()); db.session.add(key); db.session.commit()"\n   \n   echo "Initial admin API key created: $API_KEY"\n   ```\n\n## Manual Configuration\n\n### Domain Configuration\n\nUpdate the Nginx configuration in `nginx/conf.d/default.conf` to use your domain name:\n\n```nginx\nserver_name your-domain.com;\n```\n\n### SSL Certificates\n\nFor production, replace the self-signed certificates with proper ones:\n\n1. Obtain SSL certificates from a certificate authority (e.g., Let\'s Encrypt)\n2. Place the certificate and key files in `nginx/ssl/`\n3. Update the Nginx configuration if necessary\n\n### CORS Configuration\n\nUpdate the CORS configuration in the `.env` file:\n\n```\nCORS_ORIGINS=https://your-app-domain.com,https://another-domain.com\n```\n\n### Rate Limiting\n\nAdjust the rate limiting configuration in `nginx/conf.d/default.conf`:\n\n```nginx\nlimit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;\n```\n\n## Monitoring and Maintenance\n\n### Logs\n\nLogs are stored in the `logs` directory and can be accessed as follows:\n\n- **API logs**: `docker-compose logs api`\n- **Nginx access logs**: `docker-compose exec nginx cat /var/log/nginx/api_access.log`\n- **Nginx error logs**: `docker-compose exec nginx cat /var/log/nginx/api_error.log`\n- **Database logs**: `docker-compose logs db`\n\n### Health Check\n\nThe API provides a health check endpoint at `/health` that returns the status of the API and its dependencies.\n\n### Updating the API\n\nTo update the API to a new version:\n\n1. Pull the latest changes\n2. Rebuild and restart the containers:\n\n   ```bash\n   docker-compose build\n   docker-compose up -d\n   ```\n\n3. Run database migrations if needed:\n\n   ```bash\n   docker-compose exec api flask db upgrade\n   ```\n\n## Backup and Recovery\n\n### Database Backup\n\nTo backup the database:\n\n```bash\ndocker-compose exec db pg_dump -U prejudice prejudice_risk > backup_$(date +%Y%m%d).sql\n```\n\n### Database Restore\n\nTo restore the database from a backup:\n\n```bash\ncat backup_file.sql | docker-compose exec -T db psql -U prejudice prejudice_risk\n```\n\n### Volume Backup\n\nTo backup the Docker volumes:\n\n```bash\ndocker run --rm -v prejudice_risk_calculator_postgres_data:/volume -v $(pwd):/backup alpine tar -czvf /backup/postgres_data_$(date +%Y%m%d).tar.gz /volume\ndocker run --rm -v prejudice_risk_calculator_redis_data:/volume -v $(pwd):/backup alpine tar -czvf /backup/redis_data_$(date +%Y%m%d).tar.gz /volume\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **API not starting**\n   - Check logs: `docker-compose logs api`\n   - Verify environment variables in `.env` file\n   - Ensure database is running: `docker-compose ps db`\n\n2. **Database connection issues**\n   - Check database logs: `docker-compose logs db`\n   - Verify database password in `.env` file\n   - Ensure database container is running: `docker-compose ps db`\n\n3. **Nginx not serving requests**\n   - Check Nginx logs: `docker-compose logs nginx`\n   - Verify SSL certificates in `nginx/ssl/`\n   - Ensure Nginx container is running: `docker-compose ps nginx`\n\n4. **Rate limiting issues**\n   - Adjust rate limiting configuration in `nginx/conf.d/default.conf`\n   - Restart Nginx: `docker-compose restart nginx`\n\n### Getting Help\n\nIf you encounter issues not covered in this guide, please:\n\n1. Check the detailed logs for error messages\n2. Consult the API documentation\n3. Contact support at support@prejudicerisk.example.com\n\n## Security Considerations\n\n- Regularly update all components (Docker, containers, dependencies)\n- Rotate API keys periodically\n- Monitor logs for suspicious activity\n- Use proper SSL certificates from trusted authorities\n- Implement network security measures (firewall, VPN, etc.)\n- Perform regular security audits\n</create-file>\n</function_calls>', 'tool_calls': None}