{'role': 'assistant', 'content': 'Now let\'s create documentation and demo preview images:\n\n<function_calls>\n<create-file file_path="landing-page/create_additional_images.py">\nfrom PIL import Image, ImageDraw, ImageFont\nimport os\n\n# Create documentation image\ndef create_documentation_image():\n    width, height = 500, 350\n    img = Image.new(\'RGB\', (width, height), (245, 245, 245))\n    draw = ImageDraw.Draw(img)\n    \n    # Draw sidebar\n    sidebar_width = 150\n    draw.rectangle([(0, 0), (sidebar_width, height)], fill=(52, 73, 94))\n    \n    # Draw sidebar items\n    sidebar_items = [\n        "Framework",\n        "Risk Analysis",\n        "Implementation",\n        "Case Studies",\n        "API Reference",\n        "Integration"\n    ]\n    \n    try:\n        title_font = ImageFont.truetype("arial.ttf", 18)\n        sidebar_font = ImageFont.truetype("arial.ttf", 12)\n        content_font = ImageFont.truetype("arial.ttf", 14)\n        content_small_font = ImageFont.truetype("arial.ttf", 10)\n    except IOError:\n        title_font = ImageFont.load_default()\n        sidebar_font = ImageFont.load_default()\n        content_font = ImageFont.load_default()\n        content_small_font = ImageFont.load_default()\n    \n    # Draw sidebar title\n    draw.text((20, 30), "Documentation", fill=(255, 255, 255), font=title_font)\n    \n    # Draw sidebar items\n    for i, item in enumerate(sidebar_items):\n        y = 80 + i * 40\n        # Highlight the first item\n        if i == 0:\n            draw.rectangle([(0, y-5), (sidebar_width, y+25)], fill=(41, 128, 185))\n        draw.text((20, y), item, fill=(255, 255, 255), font=sidebar_font)\n    \n    # Draw main content area\n    # Header\n    draw.rectangle([(sidebar_width, 0), (width, 60)], fill=(236, 240, 241))\n    draw.text((sidebar_width + 20, 20), "Legal Prejudice Analysis Framework", fill=(52, 73, 94), font=title_font)\n    \n    # Content\n    content_x = sidebar_width + 20\n    content_y = 80\n    \n    # Section title\n    draw.text((content_x, content_y), "1. Introduction to Legal Prejudice", fill=(52, 73, 94), font=content_font)\n    content_y += 30\n    \n    # Content paragraphs\n    paragraphs = [\n        "Legal prejudice refers to bias or preconceived judgment that may affect judicial decision-making. This framework provides a structured approach to identifying, analyzing, and responding to potential prejudice in legal proceedings.",\n        \n        "The framework is based on statutory provisions (28 U.S.C. §§ 455, 144) and key Supreme Court precedents including Liteky v. United States and Caperton v. A.T. Massey Coal Co."\n    ]\n    \n    for paragraph in paragraphs:\n        # Wrap text to fit width\n        words = paragraph.split()\n        line = ""\n        y_offset = 0\n        for word in words:\n            test_line = line + word + " "\n            # Check if adding this word would exceed the width\n            if content_font.getbbox(test_line)[2] < (width - content_x - 20):\n                line = test_line\n            else:\n                draw.text((content_x, content_y + y_offset), line, fill=(0, 0, 0), font=content_small_font)\n                y_offset += 20\n                line = word + " "\n        \n        # Draw the last line\n        if line:\n            draw.text((content_x, content_y + y_offset), line, fill=(0, 0, 0), font=content_small_font)\n        \n        content_y += y_offset + 30\n    \n    # Draw a table\n    table_y = content_y\n    draw.rectangle([(content_x, table_y), (width - 20, table_y + 30)], fill=(52, 73, 94))\n    draw.text((content_x + 10, table_y + 8), "Prejudice Type", fill=(255, 255, 255), font=content_small_font)\n    draw.text((content_x + 150, table_y + 8), "Risk Level", fill=(255, 255, 255), font=content_small_font)\n    draw.text((content_x + 250, table_y + 8), "Response", fill=(255, 255, 255), font=content_small_font)\n    \n    # Table rows\n    row_data = [\n        ("Relationship-based", "High", "Motion to Recuse"),\n        ("Conduct-based", "Medium", "Document & Monitor"),\n        ("Contextual", "Low", "Standard Disclosure")\n    ]\n    \n    for i, (type_text, risk, response) in enumerate(row_data):\n        row_y = table_y + 30 + i * 30\n        # Alternating row colors\n        if i % 2 == 0:\n            draw.rectangle([(content_x, row_y), (width - 20, row_y + 30)], fill=(236, 240, 241))\n        else:\n            draw.rectangle([(content_x, row_y), (width - 20, row_y + 30)], fill=(245, 245, 245))\n        \n        draw.text((content_x + 10, row_y + 8), type_text, fill=(0, 0, 0), font=content_small_font)\n        draw.text((content_x + 150, row_y + 8), risk, fill=(0, 0, 0), font=content_small_font)\n        draw.text((content_x + 250, row_y + 8), response, fill=(0, 0, 0), font=content_small_font)\n    \n    # Save the image\n    img.save(\'assets/documentation.png\')\n    print("Documentation image created successfully!")\n\n# Create demo preview image\ndef create_demo_preview():\n    width, height = 500, 350\n    img = Image.new(\'RGB\', (width, height), (245, 245, 245))\n    draw = ImageDraw.Draw(img)\n    \n    # Draw header\n    draw.rectangle([(0, 0), (width, 50)], fill=(52, 73, 94))\n    \n    try:\n        header_font = ImageFont.truetype("arial.ttf", 18)\n        title_font = ImageFont.truetype("arial.ttf", 16)\n        label_font = ImageFont.truetype("arial.ttf", 12)\n        value_font = ImageFont.truetype("arial.ttf", 14)\n    except IOError:\n        header_font = ImageFont.load_default()\n        title_font = ImageFont.load_default()\n        label_font = ImageFont.load_default()\n        value_font = ImageFont.load_default()\n    \n    # Draw header text\n    draw.text((20, 15), "Legal Prejudice Analysis - Risk Calculator Demo", fill=(255, 255, 255), font=header_font)\n    \n    # Draw tabs\n    tabs = ["Relationship Factors", "Conduct Factors", "Contextual Factors", "Results"]\n    tab_width = width // len(tabs)\n    \n    for i, tab in enumerate(tabs):\n        tab_x = i * tab_width\n        # Highlight the last tab\n        if i == len(tabs) - 1:\n            draw.rectangle([(tab_x, 50), (tab_x + tab_width, 80)], fill=(41, 128, 185))\n            text_color = (255, 255, 255)\n        else:\n            draw.rectangle([(tab_x, 50), (tab_x + tab_width, 80)], fill=(236, 240, 241))\n            text_color = (52, 73, 94)\n        \n        # Center the text in the tab\n        text_width = label_font.getbbox(tab)[2]\n        text_x = tab_x + (tab_width - text_width) // 2\n        draw.text((text_x, 60), tab, fill=text_color, font=label_font)\n    \n    # Draw results content\n    draw.text((20, 100), "Risk Assessment Results", fill=(52, 73, 94), font=title_font)\n    \n    # Draw risk score card\n    card_x, card_y = 20, 140\n    card_width, card_height = 150, 100\n    draw.rectangle([(card_x, card_y), (card_x + card_width, card_y + card_height)], fill=(231, 76, 60))\n    draw.text((card_x + 30, card_y + 10), "Risk Score", fill=(255, 255, 255), font=label_font)\n    draw.text((card_x + 60, card_y + 40), "18", fill=(255, 255, 255), font=ImageFont.load_default())\n    draw.text((card_x + 40, card_y + 70), "HIGH RISK", fill=(255, 255, 255), font=label_font)\n    \n    # Draw risk matrix\n    matrix_x, matrix_y = 200, 140\n    matrix_width, matrix_height = 250, 200\n    draw.rectangle([(matrix_x, matrix_y), (matrix_x + matrix_width, matrix_y + matrix_height)], fill=(236, 240, 241))\n    draw.text((matrix_x + 80, matrix_y + 10), "Risk Matrix", fill=(52, 73, 94), font=label_font)\n    \n    # Draw matrix grid\n    cell_size = 40\n    for i in range(6):\n        # Horizontal lines\n        draw.line([(matrix_x + 30, matrix_y + 40 + i*cell_size), \n                  (matrix_x + 30 + 5*cell_size, matrix_y + 40 + i*cell_size)], \n                  fill=(189, 195, 199))\n        \n        # Vertical lines\n        draw.line([(matrix_x + 30 + i*cell_size, matrix_y + 40), \n                  (matrix_x + 30 + i*cell_size, matrix_y + 40 + 5*cell_size)], \n                  fill=(189, 195, 199))\n    \n    # Draw axis labels\n    draw.text((matrix_x + 100, matrix_y + 25), "Likelihood", fill=(52, 73, 94), font=label_font)\n    draw.text((matrix_x + 10, matrix_y + 120), "Impact", fill=(52, 73, 94), font=label_font)\n    \n    # Draw risk zones\n    # Low risk zone (green)\n    for i in range(2):\n        for j in range(2):\n            draw.rectangle([\n                (matrix_x + 30 + i*cell_size, matrix_y + 40 + j*cell_size),\n                (matrix_x + 30 + (i+1)*cell_size, matrix_y + 40 + (j+1)*cell_size)\n            ], fill=(46, 204, 113, 100))\n    \n    # Medium risk zone (yellow)\n    for i in range(2, 4):\n        for j in range(2, 4):\n            draw.rectangle([\n                (matrix_x + 30 + i*cell_size, matrix_y + 40 + j*cell_size),\n                (matrix_x + 30 + (i+1)*cell_size, matrix_y + 40 + (j+1)*cell_size)\n            ], fill=(241, 196, 15, 100))\n    \n    # High risk zone (red)\n    for i in range(3, 5):\n        for j in range(3, 5):\n            draw.rectangle([\n                (matrix_x + 30 + i*cell_size, matrix_y + 40 + j*cell_size),\n                (matrix_x + 30 + (i+1)*cell_size, matrix_y + 40 + (j+1)*cell_size)\n            ], fill=(231, 76, 60, 100))\n    \n    # Draw risk points\n    points = [(4, 4), (3, 5), (5, 3), (2, 4)]\n    for x, y in points:\n        point_x = matrix_x + 30 + x * cell_size - cell_size//2\n        point_y = matrix_y + 40 + y * cell_size - cell_size//2\n        draw.ellipse([(point_x-5, point_y-5), (point_x+5, point_y+5)], fill=(52, 73, 94))\n    \n    # Draw recommendations section\n    rec_x, rec_y = 20, 260\n    draw.text((rec_x, rec_y), "Recommended Actions:", fill=(52, 73, 94), font=title_font)\n    \n    recommendations = [\n        "1. File motion for recusal within 48 hours",\n        "2. Document all instances of potential prejudice",\n        "3. Prepare alternative venue motion",\n        "4. Consult with ethics counsel"\n    ]\n    \n    for i, rec in enumerate(recommendations):\n        draw.text((rec_x, rec_y + 30 + i*25), rec, fill=(0, 0, 0), font=label_font)\n    \n    # Save the image\n    img.save(\'assets/demo-preview.png\')\n    print("Demo preview image created successfully!")\n\n# Create integration logos\ndef create_integration_logos():\n    # Create directory for logos\n    os.makedirs(\'assets\', exist_ok=True)\n    \n    # Function to create a simple logo\n    def create_logo(filename, text, color):\n        width, height = 120, 60\n        img = Image.new(\'RGB\', (width, height), (255, 255, 255))\n        draw = ImageDraw.Draw(img)\n        \n        # Draw colored rectangle\n        draw.rectangle([(10, 10), (width-10, height-10)], fill=color)\n        \n        # Draw text\n        try:\n            font = ImageFont.truetype("arial.ttf", 16)\n        except IOError:\n            font = ImageFont.load_default()\n        \n        text_width = font.getbbox(text)[2]\n        text_x = (width - text_width) // 2\n        draw.text((text_x, 20), text, fill=(255, 255, 255), font=font)\n        \n        # Save the logo\n        img.save(f\'assets/logo-{filename}.png\')\n        return f\'assets/logo-{filename}.png\'\n    \n    # Create logos for different integrations\n    integrations = [\n        ("clio", "Clio", (41, 128, 185)),\n        ("practice-panther", "Practice Panther", (46, 204, 113)),\n        ("mycase", "MyCase", (155, 89, 182)),\n        ("smokeball", "Smokeball", (230, 126, 34)),\n        ("filevine", "Filevine", (231, 76, 60))\n    ]\n    \n    for filename, text, color in integrations:\n        path = create_logo(filename, text, color)\n        print(f"Created {path}")\n\n# Create all images\ncreate_documentation_image()\ncreate_demo_preview()\ncreate_integration_logos()\n\nprint("All additional images created successfully!")\n</create-file>\n</function_calls>', 'tool_calls': None}