{'role': 'assistant', 'content': 'Now, let\'s create the main application file with proper structure for production:\n\n<function_calls>\n<create-file file_path="prejudice_risk_calculator/production_setup/app.py">\n"""\nLegal Prejudice Risk Calculator API Server\nMain application file\n"""\n\nimport os\nfrom flask import Flask, jsonify, request\nfrom flask_cors import CORS\nfrom flask_limiter import Limiter\nfrom flask_limiter.util import get_remote_address\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker, scoped_session\nfrom werkzeug.exceptions import HTTPException\nimport logging\nimport uuid\n\nfrom config import config\nfrom models import Base, Assessment, Factor, Result, CMSLink, APIKey, Webhook, WebhookDelivery, FactorDefinition, RiskLevel\n\n# Initialize logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\'%(asctime)s - %(name)s - %(levelname)s - %(message)s\'\n)\nlogger = logging.getLogger(__name__)\n\ndef create_app(config_name=None):\n    """Create and configure the Flask application"""\n    if config_name is None:\n        config_name = os.environ.get(\'FLASK_CONFIG\', \'default\')\n    \n    app = Flask(__name__)\n    app.config.from_object(config[config_name])\n    \n    # Initialize extensions\n    CORS(app, resources={r"/api/*": {"origins": app.config[\'CORS_ORIGINS\']}})\n    \n    # Initialize rate limiter\n    limiter = Limiter(\n        app=app,\n        key_func=get_remote_address,\n        default_limits=[app.config[\'RATELIMIT_DEFAULT\']],\n        storage_uri=app.config[\'RATELIMIT_STORAGE_URL\']\n    )\n    \n    # Initialize database\n    engine = create_engine(app.config[\'SQLALCHEMY_DATABASE_URI\'])\n    session_factory = sessionmaker(bind=engine)\n    db_session = scoped_session(session_factory)\n    \n    # Initialize app-specific configuration\n    if config_name == \'production\':\n        config[config_name].init_app(app)\n    \n    # Register error handlers\n    @app.errorhandler(HTTPException)\n    def handle_http_exception(error):\n        """Handle HTTP exceptions"""\n        response = jsonify({\n            \'error\': error.name,\n            \'message\': error.description,\n            \'status_code\': error.code\n        })\n        response.status_code = error.code\n        return response\n    \n    @app.errorhandler(Exception)\n    def handle_exception(error):\n        """Handle general exceptions"""\n        logger.exception("Unhandled exception: %s", str(error))\n        response = jsonify({\n            \'error\': \'Internal Server Error\',\n            \'message\': \'An unexpected error occurred\',\n            \'status_code\': 500\n        })\n        response.status_code = 500\n        return response\n    \n    # Register middleware\n    @app.before_request\n    def before_request():\n        """Execute before each request"""\n        # Generate request ID for tracking\n        request.request_id = str(uuid.uuid4())\n        \n        # Log request\n        logger.info(\n            "Request %s: %s %s",\n            request.request_id,\n            request.method,\n            request.path\n        )\n    \n    @app.after_request\n    def after_request(response):\n        """Execute after each request"""\n        # Add request ID to response headers\n        response.headers[\'X-Request-ID\'] = request.request_id\n        \n        # Log response\n        logger.info(\n            "Response %s: %s %s - %s",\n            request.request_id,\n            request.method,\n            request.path,\n            response.status_code\n        )\n        \n        return response\n    \n    @app.teardown_appcontext\n    def shutdown_session(exception=None):\n        """Remove database session at the end of the request"""\n        db_session.remove()\n    \n    # Import and register blueprints\n    from routes.assessments import assessments_bp\n    from routes.factors import factors_bp\n    from routes.results import results_bp\n    from routes.cms import cms_bp\n    from routes.webhooks import webhooks_bp\n    from routes.auth import auth_bp\n    \n    app.register_blueprint(assessments_bp, url_prefix=f"{app.config[\'API_PREFIX\']}/assessments")\n    app.register_blueprint(factors_bp, url_prefix=f"{app.config[\'API_PREFIX\']}/factors")\n    app.register_blueprint(results_bp, url_prefix=f"{app.config[\'API_PREFIX\']}/results")\n    app.register_blueprint(cms_bp, url_prefix=f"{app.config[\'API_PREFIX\']}/cms")\n    app.register_blueprint(webhooks_bp, url_prefix=f"{app.config[\'API_PREFIX\']}/webhooks")\n    app.register_blueprint(auth_bp, url_prefix=f"{app.config[\'API_PREFIX\']}/auth")\n    \n    # Root route\n    @app.route(\'/\')\n    def index():\n        """API root endpoint"""\n        return jsonify({\n            \'name\': app.config[\'APP_NAME\'],\n            \'version\': app.config[\'API_VERSION\'],\n            \'status\': \'operational\',\n            \'documentation\': f"{request.url_root}{app.config[\'API_PREFIX\']}/docs"\n        })\n    \n    # Health check route\n    @app.route(\'/health\')\n    @limiter.exempt\n    def health():\n        """Health check endpoint"""\n        # Check database connection\n        try:\n            db_session.execute("SELECT 1")\n            db_status = "connected"\n        except Exception as e:\n            logger.error("Database health check failed: %s", str(e))\n            db_status = "disconnected"\n        \n        status = "healthy" if db_status == "connected" else "unhealthy"\n        status_code = 200 if status == "healthy" else 503\n        \n        response = jsonify({\n            \'status\': status,\n            \'database\': db_status,\n            \'timestamp\': datetime.datetime.utcnow().isoformat()\n        })\n        response.status_code = status_code\n        return response\n    \n    # API documentation route\n    @app.route(f"{app.config[\'API_PREFIX\']}/docs")\n    def api_docs():\n        """API documentation endpoint"""\n        return jsonify({\n            \'message\': \'API documentation will be available here\',\n            \'openapi_url\': f"{request.url_root}{app.config[\'API_PREFIX\']}/openapi.json"\n        })\n    \n    return app\n\n\nif __name__ == \'__main__\':\n    app = create_app()\n    app.run(host=\'0.0.0.0\', port=int(os.environ.get(\'PORT\', 5000)))\n</create-file>\n</function_calls>', 'tool_calls': None}