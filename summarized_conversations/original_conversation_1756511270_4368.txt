{'role': 'assistant', 'content': 'Now, let\'s create the main docker-compose.yml file that users would download to deploy the system:\n\n<function_calls>\n<create-file file_path="docker/docker-compose.yml">\nversion: \'3.8\'\n\nservices:\n  # API Server - Backend service providing REST API\n  api-server:\n    image: ${DOCKER_REGISTRY:-}legal-prejudice/api-server:${TAG:-latest}\n    build:\n      context: ../api-server\n      dockerfile: Dockerfile\n    restart: unless-stopped\n    depends_on:\n      - db\n    environment:\n      - DATABASE_URL=postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@db:5432/${DB_NAME:-legal_prejudice}\n      - SECRET_KEY=${API_SECRET_KEY:-changeme}\n      - LOG_LEVEL=${LOG_LEVEL:-info}\n      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-*}\n      - ENABLE_DOCS=${ENABLE_DOCS:-true}\n    volumes:\n      - legal_prejudice_uploads:/app/uploads\n    healthcheck:\n      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 10s\n    networks:\n      - backend\n      - frontend\n\n  # Web Frontend - User interface and calculator\n  web-frontend:\n    image: ${DOCKER_REGISTRY:-}legal-prejudice/web-frontend:${TAG:-latest}\n    build:\n      context: ../web-calculator\n      dockerfile: Dockerfile\n    restart: unless-stopped\n    environment:\n      - API_URL=${API_URL:-http://api-server:5000}\n      - NODE_ENV=${NODE_ENV:-production}\n    networks:\n      - frontend\n\n  # Database - PostgreSQL for data storage\n  db:\n    image: postgres:14-alpine\n    restart: unless-stopped\n    environment:\n      - POSTGRES_USER=${DB_USER:-postgres}\n      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}\n      - POSTGRES_DB=${DB_NAME:-legal_prejudice}\n    volumes:\n      - legal_prejudice_db_data:/var/lib/postgresql/data\n      - ./init-scripts:/docker-entrypoint-initdb.d\n    healthcheck:\n      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n    networks:\n      - backend\n\n  # Nginx - Web server and reverse proxy\n  nginx:\n    image: nginx:alpine\n    restart: unless-stopped\n    ports:\n      - "${EXTERNAL_PORT:-8080}:80"\n      - "${EXTERNAL_SSL_PORT:-8443}:443"\n    volumes:\n      - ./nginx/conf.d:/etc/nginx/conf.d\n      - ./nginx/certs:/etc/nginx/certs\n      - legal_prejudice_logs:/var/log/nginx\n    depends_on:\n      - api-server\n      - web-frontend\n    networks:\n      - frontend\n\n  # Redis - For caching and session management (optional)\n  redis:\n    image: redis:alpine\n    restart: unless-stopped\n    command: redis-server --appendonly yes\n    volumes:\n      - legal_prejudice_redis:/data\n    networks:\n      - backend\n\nvolumes:\n  legal_prejudice_db_data:\n    driver: local\n  legal_prejudice_uploads:\n    driver: local\n  legal_prejudice_logs:\n    driver: local\n  legal_prejudice_redis:\n    driver: local\n\nnetworks:\n  frontend:\n  backend:\n</create-file>\n</function_calls>', 'tool_calls': None}