{'role': 'assistant', 'content': 'Now, let\'s create the JavaScript file for our enhanced calculator:\n\n<function_calls>\n<create-file file_path="enhanced-calculator/js/main.js">\n/**\n * Legal Prejudice Risk Calculator - Enhanced Version\n * Main JavaScript functionality\n */\n\ndocument.addEventListener(\'DOMContentLoaded\', function() {\n    // Initialize variables\n    const assessmentData = {\n        caseInfo: {},\n        relationshipFactors: {},\n        conductFactors: {},\n        contextualFactors: {},\n        results: {\n            riskScore: 0,\n            riskLevel: \'Not Calculated\',\n            confidenceScore: 0,\n            factorCounts: {\n                total: 0,\n                critical: 0,\n                highImpact: 0\n            },\n            recommendations: []\n        }\n    };\n    \n    // DOM Elements\n    const progressBar = document.getElementById(\'assessment-progress\');\n    const progressSteps = document.querySelectorAll(\'.progress-step\');\n    const sections = document.querySelectorAll(\'.calculator-section\');\n    const nextButtons = document.querySelectorAll(\'.next-section\');\n    const prevButtons = document.querySelectorAll(\'.prev-section\');\n    const calculateButton = document.querySelector(\'.calculate-btn\');\n    const toggleInputs = document.querySelectorAll(\'.toggle input[type="radio"]\');\n    const ratingItems = document.querySelectorAll(\'.rating-item\');\n    const vizTabs = document.querySelectorAll(\'.viz-tab\');\n    const vizPanels = document.querySelectorAll(\'.viz-panel\');\n    const loginBtn = document.querySelector(\'.login-btn\');\n    const loginModal = document.getElementById(\'login-modal\');\n    const closeModal = document.querySelector(\'.close-modal\');\n    const modalTabs = document.querySelectorAll(\'.modal-tab\');\n    const modalPanels = document.querySelectorAll(\'.modal-panel\');\n    const saveAssessmentBtn = document.getElementById(\'save-assessment-btn\');\n    const exportPdfBtn = document.getElementById(\'export-pdf-btn\');\n    const startNewBtn = document.getElementById(\'start-new-btn\');\n    \n    // Initialize the calculator\n    initCalculator();\n    \n    /**\n     * Initialize the calculator functionality\n     */\n    function initCalculator() {\n        // Set up event listeners\n        setupNavigationListeners();\n        setupToggleListeners();\n        setupRatingListeners();\n        setupVisualizationTabs();\n        setupModalListeners();\n        setupActionButtons();\n        \n        // Initialize header scroll effect\n        initHeaderScroll();\n    }\n    \n    /**\n     * Set up navigation between sections\n     */\n    function setupNavigationListeners() {\n        // Next section buttons\n        nextButtons.forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const currentSection = this.closest(\'.calculator-section\');\n                const nextSectionId = this.dataset.next;\n                \n                // Validate current section if needed\n                if (validateSection(currentSection.id)) {\n                    // Save data from current section\n                    saveCurrentSectionData(currentSection.id);\n                    \n                    // Navigate to next section\n                    navigateToSection(nextSectionId);\n                }\n            });\n        });\n        \n        // Previous section buttons\n        prevButtons.forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const prevSectionId = this.dataset.prev;\n                navigateToSection(prevSectionId);\n            });\n        });\n        \n        // Calculate button\n        if (calculateButton) {\n            calculateButton.addEventListener(\'click\', function() {\n                const currentSection = this.closest(\'.calculator-section\');\n                \n                // Validate current section\n                if (validateSection(currentSection.id)) {\n                    // Save data from current section\n                    saveCurrentSectionData(currentSection.id);\n                    \n                    // Calculate results\n                    calculateResults();\n                    \n                    // Navigate to results section\n                    navigateToSection(\'results\');\n                }\n            });\n        }\n    }\n    \n    /**\n     * Navigate to a specific section\n     * @param {string} sectionId - The ID of the section to navigate to\n     */\n    function navigateToSection(sectionId) {\n        // Hide all sections\n        sections.forEach(section => {\n            section.classList.remove(\'active\');\n        });\n        \n        // Show the target section\n        const targetSection = document.getElementById(`${sectionId}-section`);\n        if (targetSection) {\n            targetSection.classList.add(\'active\');\n        }\n        \n        // Update progress bar and steps\n        updateProgress(sectionId);\n    }\n    \n    /**\n     * Update the progress bar and steps\n     * @param {string} currentSectionId - The ID of the current section\n     */\n    function updateProgress(currentSectionId) {\n        const steps = [\'case-info\', \'relationship-factors\', \'conduct-factors\', \'contextual-factors\', \'results\'];\n        const currentIndex = steps.indexOf(currentSectionId);\n        \n        if (currentIndex >= 0) {\n            // Update progress bar\n            const progressPercentage = (currentIndex / (steps.length - 1)) * 100;\n            progressBar.style.width = `${progressPercentage}%`;\n            \n            // Update progress steps\n            progressSteps.forEach((step, index) => {\n                if (index <= currentIndex) {\n                    step.classList.add(\'active\');\n                } else {\n                    step.classList.remove(\'active\');\n                }\n                \n                if (index < currentIndex) {\n                    step.classList.add(\'completed\');\n                } else {\n                    step.classList.remove(\'completed\');\n                }\n            });\n        }\n    }\n    \n    /**\n     * Validate the current section\n     * @param {string} sectionId - The ID of the section to validate\n     * @returns {boolean} - Whether the section is valid\n     */\n    function validateSection(sectionId) {\n        // For now, we\'ll just return true\n        // In a real implementation, you would validate the inputs\n        return true;\n    }\n    \n    /**\n     * Save data from the current section\n     * @param {string} sectionId - The ID of the section to save data from\n     */\n    function saveCurrentSectionData(sectionId) {\n        switch (sectionId) {\n            case \'case-info\':\n                assessmentData.caseInfo = {\n                    caseName: document.getElementById(\'case-name\').value,\n                    caseNumber: document.getElementById(\'case-number\').value,\n                    jurisdiction: document.getElementById(\'jurisdiction\').value,\n                    courtType: document.getElementById(\'court-type\').value,\n                    judgeName: document.getElementById(\'judge-name\').value,\n                    caseDescription: document.getElementById(\'case-description\').value\n                };\n                break;\n                \n            case \'relationship-factors\':\n                assessmentData.relationshipFactors = collectFactorData(\'relationship-factors\');\n                break;\n                \n            case \'conduct-factors\':\n                assessmentData.conductFactors = collectFactorData(\'conduct-factors\');\n                break;\n                \n            case \'contextual-factors\':\n                assessmentData.contextualFactors = collectFactorData(\'contextual-factors\');\n                break;\n        }\n    }\n    \n    /**\n     * Collect factor data from a section\n     * @param {string} sectionId - The ID of the section to collect data from\n     * @returns {Object} - The collected factor data\n     */\n    function collectFactorData(sectionId) {\n        const factorData = {};\n        const section = document.getElementById(`${sectionId}-section`);\n        \n        // Get all factor items in the section\n        const factorItems = section.querySelectorAll(\'.factor-item\');\n        \n        factorItems.forEach(item => {\n            // Get the factor name from the radio input name\n            const radioInput = item.querySelector(\'input[type="radio"]\');\n            if (radioInput) {\n                const factorName = radioInput.name;\n                const isPresent = item.querySelector(`input[name="${factorName}"]:checked`)?.value === \'yes\';\n                \n                // If the factor is present, collect likelihood and impact ratings\n                if (isPresent) {\n                    const likelihoodRating = parseInt(item.querySelector(`#${factorName}-likelihood`).dataset.rating) || 0;\n                    const impactRating = parseInt(item.querySelector(`#${factorName}-impact`).dataset.rating) || 0;\n                    const notes = item.querySelector(`#${factorName}-notes`)?.value || \'\';\n                    \n                    factorData[factorName] = {\n                        present: true,\n                        likelihood: likelihoodRating,\n                        impact: impactRating,\n                        notes: notes\n                    };\n                } else {\n                    factorData[factorName] = {\n                        present: false\n                    };\n                }\n            }\n        });\n        \n        return factorData;\n    }\n    \n    /**\n     * Set up toggle input listeners\n     */\n    function setupToggleListeners() {\n        toggleInputs.forEach(input => {\n            input.addEventListener(\'change\', function() {\n                const factorItem = this.closest(\'.factor-item\');\n                const factorDetails = factorItem.querySelector(\'.factor-details\');\n                const factorName = this.name;\n                \n                if (this.value === \'yes\' && factorDetails) {\n                    factorDetails.style.display = \'block\';\n                } else if (factorDetails) {\n                    factorDetails.style.display = \'none\';\n                    \n                    // Reset ratings\n                    const likelihoodRating = factorItem.querySelector(`#${factorName}-likelihood`);\n                    const impactRating = factorItem.querySelector(`#${factorName}-impact`);\n                    \n                    if (likelihoodRating) {\n                        likelihoodRating.dataset.rating = \'0\';\n                        updateRatingDisplay(likelihoodRating);\n                    }\n                    \n                    if (impactRating) {\n                        impactRating.dataset.rating = \'0\';\n                        updateRatingDisplay(impactRating);\n                    }\n                }\n            });\n        });\n    }\n    \n    /**\n     * Set up rating input listeners\n     */\n    function setupRatingListeners() {\n        ratingItems.forEach(item => {\n            item.addEventListener(\'click\', function() {\n                const rating = this.closest(\'.rating\');\n                const value = parseInt(this.dataset.value);\n                \n                // Update the rating value\n                rating.dataset.rating = value;\n                \n                // Update the display\n                updateRatingDisplay(rating);\n            });\n        });\n    }\n    \n    /**\n     * Update the rating display\n     * @param {HTMLElement} rating - The rating element to update\n     */\n    function updateRatingDisplay(rating) {\n        const value = parseInt(rating.dataset.rating);\n        const items = rating.querySelectorAll(\'.rating-item\');\n        const label = rating.parentElement.querySelector(\'.rating-label\');\n        \n        // Update the rating items\n        items.forEach((item, index) => {\n            const itemValue = parseInt(item.dataset.value);\n            \n            // Clear existing classes\n            item.classList.remove(\'active\');\n            \n            // Update the icon\n            if (itemValue <= value) {\n                item.classList.add(\'active\');\n                item.innerHTML = \'<i class="fas fa-circle"></i>\';\n            } else {\n                item.innerHTML = \'<i class="far fa-circle"></i>\';\n            }\n        });\n        \n        // Update the label\n        if (label) {\n            if (value === 0) {\n                label.textContent = \'Not Selected\';\n            } else if (value === 1) {\n                label.textContent = \'Very Low\';\n            } else if (value === 2) {\n                label.textContent = \'Low\';\n            } else if (value === 3) {\n                label.textContent = \'Medium\';\n            } else if (value === 4) {\n                label.textContent = \'High\';\n            } else if (value === 5) {\n                label.textContent = \'Very High\';\n            }\n        }\n    }\n    \n    /**\n     * Set up visualization tabs\n     */\n    function setupVisualizationTabs() {\n        vizTabs.forEach(tab => {\n            tab.addEventListener(\'click\', function() {\n                const tabId = this.dataset.tab;\n                \n                // Update active tab\n                vizTabs.forEach(t => t.classList.remove(\'active\'));\n                this.classList.add(\'active\');\n                \n                // Show the corresponding panel\n                vizPanels.forEach(panel => {\n                    panel.classList.remove(\'active\');\n                });\n                document.getElementById(`${tabId}-panel`).classList.add(\'active\');\n            });\n        });\n    }\n    \n    /**\n     * Set up modal listeners\n     */\n    function setupModalListeners() {\n        // Open modal\n        if (loginBtn) {\n            loginBtn.addEventListener(\'click\', function(e) {\n                e.preventDefault();\n                loginModal.classList.add(\'active\');\n            });\n        }\n        \n        // Close modal\n        if (closeModal) {\n            closeModal.addEventListener(\'click\', function() {\n                loginModal.classList.remove(\'active\');\n            });\n        }\n        \n        // Close modal when clicking outside\n        window.addEventListener(\'click\', function(e) {\n            if (e.target === loginModal) {\n                loginModal.classList.remove(\'active\');\n            }\n        });\n        \n        // Modal tabs\n        modalTabs.forEach(tab => {\n            tab.addEventListener(\'click\', function() {\n                const tabId = this.dataset.tab;\n                \n                // Update active tab\n                modalTabs.forEach(t => t.classList.remove(\'active\'));\n                this.classList.add(\'active\');\n                \n                // Show the corresponding panel\n                modalPanels.forEach(panel => {\n                    panel.classList.remove(\'active\');\n                });\n                document.getElementById(`${tabId}-panel`).classList.add(\'active\');\n            });\n        });\n    }\n    \n    /**\n     * Set up action buttons\n     */\n    function setupActionButtons() {\n        // Save assessment button\n        if (saveAssessmentBtn) {\n            saveAssessmentBtn.addEventListener(\'click\', function() {\n                // Check if user is logged in\n                const isLoggedIn = false; // This would be determined by your authentication system\n                \n                if (isLoggedIn) {\n                    saveAssessment();\n                } else {\n                    // Show login modal\n                    loginModal.classList.add(\'active\');\n                }\n            });\n        }\n        \n        // Export PDF button\n        if (exportPdfBtn) {\n            exportPdfBtn.addEventListener(\'click\', function() {\n                exportToPdf();\n            });\n        }\n        \n        // Start new button\n        if (startNewBtn) {\n            startNewBtn.addEventListener(\'click\', function() {\n                resetCalculator();\n            });\n        }\n    }\n    \n    /**\n     * Initialize header scroll effect\n     */\n    function initHeaderScroll() {\n        const header = document.querySelector(\'.header\');\n        const scrollThreshold = 50;\n        \n        function handleScroll() {\n            if (window.scrollY > scrollThreshold) {\n                header.classList.add(\'scrolled\');\n            } else {\n                header.classList.remove(\'scrolled\');\n            }\n        }\n        \n        window.addEventListener(\'scroll\', handleScroll);\n        handleScroll(); // Check initial state\n    }\n    \n    /**\n     * Calculate the results based on the assessment data\n     */\n    function calculateResults() {\n        // Combine all factors\n        const allFactors = {\n            ...assessmentData.relationshipFactors,\n            ...assessmentData.conductFactors,\n            ...assessmentData.contextualFactors\n        };\n        \n        // Count factors\n        let totalFactors = 0;\n        let criticalFactors = 0;\n        let highImpactFactors = 0;\n        let totalRiskScore = 0;\n        let maxPossibleScore = 0;\n        let factorCount = 0;\n        \n        // Process each factor\n        for (const factorName in allFactors) {\n            const factor = allFactors[factorName];\n            \n            if (factor.present) {\n                totalFactors++;\n                \n                // Calculate risk score for this factor\n                const factorScore = factor.likelihood * factor.impact;\n                totalRiskScore += factorScore;\n                maxPossibleScore += 25; // Max possible is 5 * 5\n                factorCount++;\n                \n                // Check if critical (both likelihood and impact are high)\n                if (factor.likelihood >= 4 && factor.impact >= 4) {\n                    criticalFactors++;\n                }\n                \n                // Check if high impact\n                if (factor.impact >= 4) {\n                    highImpactFactors++;\n                }\n            }\n        }\n        \n        // Calculate final risk score (0-100 scale)\n        let finalRiskScore = 0;\n        if (maxPossibleScore > 0) {\n            finalRiskScore = Math.round((totalRiskScore / maxPossibleScore) * 100);\n        }\n        \n        // Determine risk level\n        let riskLevel = \'Not Calculated\';\n        if (finalRiskScore >= 80) {\n            riskLevel = \'Critical\';\n        } else if (finalRiskScore >= 60) {\n            riskLevel = \'High\';\n        } else if (finalRiskScore >= 40) {\n            riskLevel = \'Medium\';\n        } else if (finalRiskScore >= 20) {\n            riskLevel = \'Low\';\n        } else if (finalRiskScore > 0) {\n            riskLevel = \'Minimal\';\n        }\n        \n        // Calculate confidence score (based on number of factors assessed)\n        const confidenceScore = Math.min(100, Math.round((factorCount / 10) * 100));\n        \n        // Generate recommendations based on risk level\n        const recommendations = generateRecommendations(riskLevel, criticalFactors, highImpactFactors);\n        \n        // Store results\n        assessmentData.results = {\n            riskScore: finalRiskScore,\n            riskLevel: riskLevel,\n            confidenceScore: confidenceScore,\n            factorCounts: {\n                total: totalFactors,\n                critical: criticalFactors,\n                highImpact: highImpactFactors\n            },\n            recommendations: recommendations\n        };\n        \n        // Update the results display\n        updateResultsDisplay();\n        \n        // Initialize charts\n        initCharts();\n    }\n    \n    /**\n     * Generate recommendations based on risk level\n     * @param {string} riskLevel - The calculated risk level\n     * @param {number} criticalFactors - The number of critical factors\n     * @param {number} highImpactFactors - The number of high impact factors\n     * @returns {Array} - Array of recommendation objects\n     */\n    function generateRecommendations(riskLevel, criticalFactors, highImpactFactors) {\n        const recommendations = [];\n        \n        // Base recommendations on risk level\n        if (riskLevel === \'Critical\') {\n            recommendations.push({\n                title: \'File Motion for Recusal Immediately\',\n                text: \'The risk level indicates a strong case for judicial prejudice. File a motion for recusal within 48 hours.\',\n                icon: \'exclamation-triangle\'\n            });\n            \n            recommendations.push({\n                title: \'Document All Interactions\',\n                text: \'Maintain detailed records of all interactions with the court, including verbatim statements.\',\n                icon: \'file-alt\'\n            });\n            \n            recommendations.push({\n                title: \'Prepare for Appeal\',\n                text: \'Begin preparing appeal strategy focused on judicial prejudice issues.\',\n                icon: \'gavel\'\n            });\n        } \n        else if (riskLevel === \'High\') {\n            recommendations.push({\n                title: \'Consider Motion for Recusal\',\n                text: \'Evaluate filing a motion for recusal based on the identified prejudice factors.\',\n                icon: \'balance-scale\'\n            });\n            \n            recommendations.push({\n                title: \'Document Key Factors\',\n                text: \'Document all instances of potential prejudice with dates, witnesses, and context.\',\n                icon: \'clipboard-list\'\n            });\n            \n            recommendations.push({\n                title: \'Consult with Ethics Counsel\',\n                text: \'Seek advice from ethics counsel regarding the appropriate response strategy.\',\n                icon: \'user-tie\'\n            });\n        }\n        else if (riskLevel === \'Medium\') {\n            recommendations.push({\n                title: \'Monitor Ongoing Conduct\',\n                text: \'Closely monitor judicial conduct for additional signs of prejudice.\',\n                icon: \'eye\'\n            });\n            \n            recommendations.push({\n                title: \'Document Concerning Behavior\',\n                text: \'Document any concerning behavior or statements for future reference.\',\n                icon: \'clipboard\'\n            });\n            \n            recommendations.push({\n                title: \'Consider Disclosure Filing\',\n                text: \'Consider filing a disclosure document noting potential concerns about impartiality.\',\n                icon: \'file-signature\'\n            });\n        }\n        else if (riskLevel === \'Low\') {\n            recommendations.push({\n                title: \'Standard Documentation\',\n                text: \'Maintain standard documentation of proceedings.\',\n                icon: \'file\'\n            });\n            \n            recommendations.push({\n                title: \'Routine Monitoring\',\n                text: \'Continue routine monitoring of judicial conduct.\',\n                icon: \'search\'\n            });\n        }\n        else if (riskLevel === \'Minimal\') {\n            recommendations.push({\n                title: \'No Special Action Required\',\n                text: \'Continue standard case management practices.\',\n                icon: \'check-circle\'\n            });\n        }\n        \n        // Add recommendations based on critical factors\n        if (criticalFactors > 0) {\n            recommendations.push({\n                title: `Address ${criticalFactors} Critical Factor${criticalFactors > 1 ? \'s\' : \'\'}`,\n                text: `Focus on documenting and addressing the ${criticalFactors} critical prejudice factor${criticalFactors > 1 ? \'s\' : \'\'} identified in this assessment.`,\n                icon: \'exclamation-circle\'\n            });\n        }\n        \n        return recommendations;\n    }\n    \n    /**\n     * Update the results display\n     */\n    function updateResultsDisplay() {\n        const results = assessmentData.results;\n        \n        // Update risk score\n        document.getElementById(\'risk-score-value\').textContent = results.riskScore;\n        \n        // Update risk level\n        const riskLevelElement = document.querySelector(\'#risk-level .risk-level-value\');\n        riskLevelElement.textContent = results.riskLevel;\n        riskLevelElement.className = \'risk-level-value \' + results.riskLevel.toLowerCase();\n        \n        // Update confidence score\n        document.getElementById(\'confidence-fill\').style.width = `${results.confidenceScore}%`;\n        document.getElementById(\'confidence-value\').textContent = `${results.confidenceScore}%`;\n        \n        // Update factor counts\n        document.getElementById(\'total-factors\').textContent = results.factorCounts.total;\n        document.getElementById(\'critical-factors\').textContent = results.factorCounts.critical;\n        document.getElementById(\'high-impact\').textContent = results.factorCounts.highImpact;\n        \n        // Update recommendations\n        const recommendationsContent = document.getElementById(\'recommendations-content\');\n        recommendationsContent.innerHTML = \'\';\n        \n        if (results.recommendations.length > 0) {\n            results.recommendations.forEach(recommendation => {\n                const recommendationItem = document.createElement(\'div\');\n                recommendationItem.className = \'recommendation-item\';\n                \n                recommendationItem.innerHTML = `\n                    <div class="recommendation-icon">\n                        <i class="fas fa-${recommendation.icon}"></i>\n                    </div>\n                    <div class="recommendation-text">\n                        <h4>${recommendation.title}</h4>\n                        <p>${recommendation.text}</p>\n                    </div>\n                `;\n                \n                recommendationsContent.appendChild(recommendationItem);\n            });\n        } else {\n            recommendationsContent.innerHTML = \'<p>No recommendations available.</p>\';\n        }\n    }\n    \n    /**\n     * Initialize the charts\n     */\n    function initCharts() {\n        initRiskMatrixChart();\n        initFactorChart();\n        initCategoryChart();\n    }\n    \n    /**\n     * Initialize the risk matrix chart\n     */\n    function initRiskMatrixChart() {\n        const ctx = document.getElementById(\'risk-matrix-chart\').getContext(\'2d\');\n        \n        // Combine all factors\n        const allFactors = {\n            ...assessmentData.relationshipFactors,\n            ...assessmentData.conductFactors,\n            ...assessmentData.contextualFactors\n        };\n        \n        // Prepare data for the chart\n        const dataPoints = [];\n        const labels = [];\n        \n        for (const factorName in allFactors) {\n            const factor = allFactors[factorName];\n            \n            if (factor.present) {\n                dataPoints.push({\n                    x: factor.likelihood,\n                    y: factor.impact,\n                    r: 8, // Bubble size\n                    factorName: formatFactorName(factorName)\n                });\n                labels.push(formatFactorName(factorName));\n            }\n        }\n        \n        // Create the chart\n        const riskMatrixChart = new Chart(ctx, {\n            type: \'bubble\',\n            data: {\n                datasets: [{\n                    label: \'Risk Factors\',\n                    data: dataPoints,\n                    backgroundColor: function(context) {\n                        const index = context.dataIndex;\n                        const value = context.dataset.data[index];\n                        const x = value.x; // likelihood\n                        const y = value.y; // impact\n                        const risk = x * y;\n                        \n                        if (risk >= 16) {\n                            return \'rgba(231, 76, 60, 0.7)\'; // Critical (red)\n                        } else if (risk >= 9) {\n                            return \'rgba(230, 126, 34, 0.7)\'; // High (orange)\n                        } else if (risk >= 4) {\n                            return \'rgba(241, 196, 15, 0.7)\'; // Medium (yellow)\n                        } else {\n                            return \'rgba(46, 204, 113, 0.7)\'; // Low (green)\n                        }\n                    },\n                    borderColor: \'rgba(0, 0, 0, 0.1)\',\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                scales: {\n                    x: {\n                        type: \'linear\',\n                        position: \'bottom\',\n                        min: 0.5,\n                        max: 5.5,\n                        title: {\n                            display: true,\n                            text: \'Likelihood\'\n                        },\n                        ticks: {\n                            stepSize: 1,\n                            callback: function(value) {\n                                if (value === 1) return \'Very Low\';\n                                if (value === 2) return \'Low\';\n                                if (value === 3) return \'Medium\';\n                                if (value === 4) return \'High\';\n                                if (value === 5) return \'Very High\';\n                                return \'\';\n                            }\n                        },\n                        grid: {\n                            color: \'rgba(0, 0, 0, 0.1)\'\n                        }\n                    },\n                    y: {\n                        type: \'linear\',\n                        min: 0.5,\n                        max: 5.5,\n                        title: {\n                            display: true,\n                            text: \'Impact\'\n                        },\n                        ticks: {\n                            stepSize: 1,\n                            callback: function(value) {\n                                if (value === 1) return \'Very Low\';\n                                if (value === 2) return \'Low\';\n                                if (value === 3) return \'Medium\';\n                                if (value === 4) return \'High\';\n                                if (value === 5) return \'Very High\';\n                                return \'\';\n                            }\n                        },\n                        grid: {\n                            color: \'rgba(0, 0, 0, 0.1)\'\n                        }\n                    }\n                },\n                plugins: {\n                    tooltip: {\n                        callbacks: {\n                            label: function(context) {\n                                const dataPoint = context.raw;\n                                return [\n                                    dataPoint.factorName,\n                                    `Likelihood: ${getLikelihoodLabel(dataPoint.x)}`,\n                                    `Impact: ${getImpactLabel(dataPoint.y)}`,\n                                    `Risk Score: ${dataPoint.x * dataPoint.y}`\n                                ];\n                            }\n                        }\n                    },\n                    legend: {\n                        display: false\n                    }\n                }\n            }\n        });\n        \n        // Add risk zones\n        const originalDraw = riskMatrixChart.draw;\n        riskMatrixChart.draw = function() {\n            originalDraw.apply(this, arguments);\n            \n            const chart = this;\n            const ctx = chart.ctx;\n            const chartArea = chart.chartArea;\n            const xAxis = chart.scales.x;\n            const yAxis = chart.scales.y;\n            \n            // Draw risk zones\n            ctx.save();\n            \n            // Critical zone (red)\n            ctx.fillStyle = \'rgba(231, 76, 60, 0.1)\';\n            ctx.fillRect(\n                xAxis.getPixelForValue(3.5),\n                yAxis.getPixelForValue(5.5),\n                xAxis.getPixelForValue(5.5) - xAxis.getPixelForValue(3.5),\n                yAxis.getPixelForValue(3.5) - yAxis.getPixelForValue(5.5)\n            );\n            \n            // High zone (orange)\n            ctx.fillStyle = \'rgba(230, 126, 34, 0.1)\';\n            ctx.fillRect(\n                xAxis.getPixelForValue(2.5),\n                yAxis.getPixelForValue(3.5),\n                xAxis.getPixelForValue(5.5) - xAxis.getPixelForValue(2.5),\n                yAxis.getPixelForValue(2.5) - yAxis.getPixelForValue(3.5)\n            );\n            ctx.fillRect(\n                xAxis.getPixelForValue(3.5),\n                yAxis.getPixelForValue(2.5),\n                xAxis.getPixelForValue(5.5) - xAxis.getPixelForValue(3.5),\n                yAxis.getPixelForValue(0.5) - yAxis.getPixelForValue(2.5)\n            );\n            \n            // Medium zone (yellow)\n            ctx.fillStyle = \'rgba(241, 196, 15, 0.1)\';\n            ctx.fillRect(\n                xAxis.getPixelForValue(1.5),\n                yAxis.getPixelForValue(2.5),\n                xAxis.getPixelForValue(2.5) - xAxis.getPixelForValue(1.5),\n                yAxis.getPixelForValue(0.5) - yAxis.getPixelForValue(2.5)\n            );\n            ctx.fillRect(\n                xAxis.getPixelForValue(2.5),\n                yAxis.getPixelForValue(1.5),\n                xAxis.getPixelForValue(3.5) - xAxis.getPixelForValue(2.5),\n                yAxis.getPixelForValue(0.5) - yAxis.getPixelForValue(1.5)\n            );\n            \n            // Low zone (green)\n            ctx.fillStyle = \'rgba(46, 204, 113, 0.1)\';\n            ctx.fillRect(\n                xAxis.getPixelForValue(0.5),\n                yAxis.getPixelForValue(1.5),\n                xAxis.getPixelForValue(1.5) - xAxis.getPixelForValue(0.5),\n                yAxis.getPixelForValue(0.5) - yAxis.getPixelForValue(1.5)\n            );\n            \n            ctx.restore();\n        };\n        \n        riskMatrixChart.update();\n    }\n    \n    /**\n     * Initialize the factor chart\n     */\n    function initFactorChart() {\n        const ctx = document.getElementById(\'factor-chart\').getContext(\'2d\');\n        \n        // Combine all factors\n        const allFactors = {\n            ...assessmentData.relationshipFactors,\n            ...assessmentData.conductFactors,\n            ...assessmentData.contextualFactors\n        };\n        \n        // Prepare data for the chart\n        const labels = [];\n        const likelihoodData = [];\n        const impactData = [];\n        const riskScoreData = [];\n        \n        for (const factorName in allFactors) {\n            const factor = allFactors[factorName];\n            \n            if (factor.present) {\n                labels.push(formatFactorName(factorName));\n                likelihoodData.push(factor.likelihood);\n                impactData.push(factor.impact);\n                riskScoreData.push(factor.likelihood * factor.impact);\n            }\n        }\n        \n        // Create the chart\n        const factorChart = new Chart(ctx, {\n            type: \'bar\',\n            data: {\n                labels: labels,\n                datasets: [\n                    {\n                        label: \'Risk Score\',\n                        data: riskScoreData,\n                        backgroundColor: function(context) {\n                            const value = context.dataset.data[context.dataIndex];\n                            \n                            if (value >= 16) {\n                                return \'rgba(231, 76, 60, 0.7)\'; // Critical (red)\n                            } else if (value >= 9) {\n                                return \'rgba(230, 126, 34, 0.7)\'; // High (orange)\n                            } else if (value >= 4) {\n                                return \'rgba(241, 196, 15, 0.7)\'; // Medium (yellow)\n                            } else {\n                                return \'rgba(46, 204, 113, 0.7)\'; // Low (green)\n                            }\n                        },\n                        borderColor: \'rgba(0, 0, 0, 0.1)\',\n                        borderWidth: 1,\n                        order: 1\n                    },\n                    {\n                        label: \'Likelihood\',\n                        data: likelihoodData,\n                        type: \'line\',\n                        borderColor: \'rgba(52, 152, 219, 0.7)\',\n                        backgroundColor: \'rgba(52, 152, 219, 0.1)\',\n                        borderWidth: 2,\n                        pointBackgroundColor: \'rgba(52, 152, 219, 0.7)\',\n                        pointBorderColor: \'#fff\',\n                        pointBorderWidth: 1,\n                        pointRadius: 4,\n                        fill: false,\n                        order: 0\n                    },\n                    {\n                        label: \'Impact\',\n                        data: impactData,\n                        type: \'line\',\n                        borderColor: \'rgba(155, 89, 182, 0.7)\',\n                        backgroundColor: \'rgba(155, 89, 182, 0.1)\',\n                        borderWidth: 2,\n                        pointBackgroundColor: \'rgba(155, 89, 182, 0.7)\',\n                        pointBorderColor: \'#fff\',\n                        pointBorderWidth: 1,\n                        pointRadius: 4,\n                        fill: false,\n                        order: 0\n                    }\n                ]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                scales: {\n                    x: {\n                        ticks: {\n                            autoSkip: false,\n                            maxRotation: 45,\n                            minRotation: 45\n                        }\n                    },\n                    y: {\n                        beginAtZero: true,\n                        max: 25,\n                        title: {\n                            display: true,\n                            text: \'Value\'\n                        }\n                    }\n                },\n                plugins: {\n                    tooltip: {\n                        callbacks: {\n                            label: function(context) {\n                                const datasetLabel = context.dataset.label;\n                                const value = context.raw;\n                                \n                                if (datasetLabel === \'Likelihood\') {\n                                    return `Likelihood: ${value} (${getLikelihoodLabel(value)})`;\n                                } else if (datasetLabel === \'Impact\') {\n                                    return `Impact: ${value} (${getImpactLabel(value)})`;\n                                } else {\n                                    return `Risk Score: ${value}`;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        });\n    }\n    \n    /**\n     * Initialize the category chart\n     */\n    function initCategoryChart() {\n        const ctx = document.getElementById(\'category-chart\').getContext(\'2d\');\n        \n        // Calculate category scores\n        const relationshipScore = calculateCategoryScore(assessmentData.relationshipFactors);\n        const conductScore = calculateCategoryScore(assessmentData.conductFactors);\n        const contextualScore = calculateCategoryScore(assessmentData.contextualFactors);\n        \n        // Create the chart\n        const categoryChart = new Chart(ctx, {\n            type: \'radar\',\n            data: {\n                labels: [\'Relationship Factors\', \'Conduct Factors\', \'Contextual Factors\'],\n                datasets: [{\n                    label: \'Category Risk Scores\',\n                    data: [relationshipScore, conductScore, contextualScore],\n                    backgroundColor: \'rgba(52, 152, 219, 0.2)\',\n                    borderColor: \'rgba(52, 152, 219, 0.7)\',\n                    borderWidth: 2,\n                    pointBackgroundColor: \'rgba(52, 152, 219, 0.7)\',\n                    pointBorderColor: \'#fff\',\n                    pointBorderWidth: 1,\n                    pointRadius: 4\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                scales: {\n                    r: {\n                        beginAtZero: true,\n                        max: 100,\n                        ticks: {\n                            stepSize: 20\n                        }\n                    }\n                },\n                plugins: {\n                    tooltip: {\n                        callbacks: {\n                            label: function(context) {\n                                const value = context.raw;\n                                return `Risk Score: ${value}%`;\n                            }\n                        }\n                    }\n                }\n            }\n        });\n    }\n    \n    /**\n     * Calculate the score for a category of factors\n     * @param {Object} factors - The factors in the category\n     * @returns {number} - The category score (0-100)\n     */\n    function calculateCategoryScore(factors) {\n        let totalScore = 0;\n        let maxPossibleScore = 0;\n        \n        for (const factorName in factors) {\n            const factor = factors[factorName];\n            \n            if (factor.present) {\n                totalScore += factor.likelihood * factor.impact;\n                maxPossibleScore += 25; // Max possible is 5 * 5\n            }\n        }\n        \n        if (maxPossibleScore === 0) {\n            return 0;\n        }\n        \n        return Math.round((totalScore / maxPossibleScore) * 100);\n    }\n    \n    /**\n     * Format a factor name for display\n     * @param {string} factorName - The factor name to format\n     * @returns {string} - The formatted factor name\n     */\n    function formatFactorName(factorName) {\n        // Convert kebab-case to Title Case\n        return factorName\n            .split(\'-\')\n            .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n            .join(\' \');\n    }\n    \n    /**\n     * Get the label for a likelihood value\n     * @param {number} value - The likelihood value\n     * @returns {string} - The likelihood label\n     */\n    function getLikelihoodLabel(value) {\n        if (value === 1) return \'Very Low\';\n        if (value === 2) return \'Low\';\n        if (value === 3) return \'Medium\';\n        if (value === 4) return \'High\';\n        if (value === 5) return \'Very High\';\n        return \'Unknown\';\n    }\n    \n    /**\n     * Get the label for an impact value\n     * @param {number} value - The impact value\n     * @returns {string} - The impact label\n     */\n    function getImpactLabel(value) {\n        if (value === 1) return \'Very Low\';\n        if (value === 2) return \'Low\';\n        if (value === 3) return \'Medium\';\n        if (value === 4) return \'High\';\n        if (value === 5) return \'Very High\';\n        return \'Unknown\';\n    }\n    \n    /**\n     * Save the current assessment\n     */\n    function saveAssessment() {\n        // This would typically involve an API call to save the assessment data\n        console.log(\'Saving assessment:\', assessmentData);\n        \n        // For now, just show an alert\n        alert(\'Assessment saved successfully!\');\n    }\n    \n    /**\n     * Export the assessment to PDF\n     */\n    function exportToPdf() {\n        // This would typically involve generating a PDF\n        console.log(\'Exporting to PDF:\', assessmentData);\n        \n        // For now, just show an alert\n        alert(\'PDF export functionality will be implemented in a future update.\');\n    }\n    \n    /**\n     * Reset the calculator\n     */\n    function resetCalculator() {\n        // Reset assessment data\n        assessmentData.caseInfo = {};\n        assessmentData.relationshipFactors = {};\n        assessmentData.conductFactors = {};\n        assessmentData.contextualFactors = {};\n        assessmentData.results = {\n            riskScore: 0,\n            riskLevel: \'Not Calculated\',\n            confidenceScore: 0,\n            factorCounts: {\n                total: 0,\n                critical: 0,\n                highImpact: 0\n            },\n            recommendations: []\n        };\n        \n        // Reset form inputs\n        document.querySelectorAll(\'input[type="text"], input[type="email"], input[type="password"], textarea, select\').forEach(input => {\n            input.value = \'\';\n        });\n        \n        // Reset radio buttons\n        document.querySelectorAll(\'input[type="radio"]\').forEach(radio => {\n            radio.checked = false;\n        });\n        \n        // Reset ratings\n        document.querySelectorAll(\'.rating\').forEach(rating => {\n            rating.dataset.rating = \'0\';\n            updateRatingDisplay(rating);\n        });\n        \n        // Hide factor details\n        document.querySelectorAll(\'.factor-details\').forEach(details => {\n            details.style.display = \'none\';\n        });\n        \n        // Navigate to first section\n        navigateToSection(\'case-info\');\n    }\n});\n</create-file>\n</function_calls>', 'tool_calls': None}