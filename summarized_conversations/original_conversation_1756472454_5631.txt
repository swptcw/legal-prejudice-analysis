{'role': 'assistant', 'content': 'Let\'s create the authentication utility:\n\n<function_calls>\n<create-file file_path="prejudice_risk_calculator/production_setup/utils/auth.py">\n"""\nAuthentication utilities for the API\n"""\n\nimport hashlib\nimport functools\nfrom flask import request, jsonify, g, current_app\nfrom werkzeug.exceptions import Unauthorized, Forbidden\n\nfrom models import APIKey\n\ndef hash_api_key(api_key):\n    """Hash an API key for comparison"""\n    return hashlib.sha256(api_key.encode(\'utf-8\')).hexdigest()\n\ndef get_api_key_from_request():\n    """Extract and validate API key from request"""\n    # Get API key from Authorization header\n    auth_header = request.headers.get(\'Authorization\')\n    if not auth_header or not auth_header.startswith(\'ApiKey \'):\n        raise Unauthorized("Missing or invalid Authorization header")\n    \n    api_key = auth_header.replace(\'ApiKey \', \'\')\n    key_hash = hash_api_key(api_key)\n    \n    # Query API key from database\n    key = g.db_session.query(APIKey).filter_by(key_hash=key_hash).first()\n    if not key:\n        raise Unauthorized("Invalid API key")\n    \n    # Check if key is active\n    if not key.is_active:\n        raise Unauthorized("API key is inactive")\n    \n    # Check if key is expired\n    if key.expires_at and key.expires_at < datetime.datetime.utcnow():\n        raise Unauthorized("API key is expired")\n    \n    # Update last used timestamp\n    key.last_used_at = datetime.datetime.utcnow()\n    \n    # Store key in request context\n    g.api_key = key\n    \n    return key\n\ndef require_api_key(f):\n    """Decorator to require API key authentication"""\n    @functools.wraps(f)\n    def decorated(*args, **kwargs):\n        try:\n            get_api_key_from_request()\n        except Unauthorized as e:\n            return jsonify({"error": str(e)}), 401\n        except Exception as e:\n            current_app.logger.exception(f"Authentication error: {str(e)}")\n            return jsonify({"error": "Authentication error"}), 500\n        \n        return f(*args, **kwargs)\n    \n    return decorated\n\ndef is_admin(f):\n    """Decorator to require admin privileges"""\n    @functools.wraps(f)\n    def decorated(*args, **kwargs):\n        # In a real implementation, this would check admin status\n        # For now, we\'ll assume all authenticated users are admins\n        if not hasattr(g, \'api_key\'):\n            return jsonify({"error": "Authentication required"}), 401\n        \n        # Check if key has admin flag (not implemented in this version)\n        # if not g.api_key.is_admin:\n        #     return jsonify({"error": "Admin privileges required"}), 403\n        \n        return f(*args, **kwargs)\n    \n    return decorated\n</create-file>\n</function_calls>', 'tool_calls': None}