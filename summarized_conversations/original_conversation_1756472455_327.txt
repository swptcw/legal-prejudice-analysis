{'role': 'assistant', 'content': 'Let\'s create the validation utility:\n\n<function_calls>\n<create-file file_path="prejudice_risk_calculator/production_setup/utils/validation.py">\n"""\nValidation utilities for request data\n"""\n\ndef validate_assessment_data(data):\n    """Validate assessment creation/update data"""\n    errors = {}\n    \n    # Required fields\n    required_fields = ["case_name", "judge_name", "assessor_name"]\n    for field in required_fields:\n        if field not in data or not data[field]:\n            errors[field] = f"{field} is required"\n    \n    # Field length validations\n    if "case_name" in data and len(data["case_name"]) > 255:\n        errors["case_name"] = "case_name must be 255 characters or less"\n    \n    if "judge_name" in data and len(data["judge_name"]) > 255:\n        errors["judge_name"] = "judge_name must be 255 characters or less"\n    \n    if "assessor_name" in data and len(data["assessor_name"]) > 255:\n        errors["assessor_name"] = "assessor_name must be 255 characters or less"\n    \n    # Date format validation\n    if "assessment_date" in data:\n        try:\n            # Simple format check - a more robust implementation would use datetime.strptime\n            parts = data["assessment_date"].split("-")\n            if len(parts) != 3 or len(parts[0]) != 4 or len(parts[1]) != 2 or len(parts[2]) != 2:\n                errors["assessment_date"] = "assessment_date must be in YYYY-MM-DD format"\n        except:\n            errors["assessment_date"] = "assessment_date must be in YYYY-MM-DD format"\n    \n    return errors\n\ndef validate_factor_data(data, require_id=True):\n    """Validate factor data"""\n    errors = {}\n    \n    # Required fields\n    if require_id and ("id" not in data or not data["id"]):\n        errors["id"] = "id is required"\n    \n    # Validate likelihood if present\n    if "likelihood" in data:\n        try:\n            likelihood = int(data["likelihood"])\n            if likelihood < 1 or likelihood > 5:\n                errors["likelihood"] = "likelihood must be between 1 and 5"\n        except:\n            errors["likelihood"] = "likelihood must be an integer"\n    \n    # Validate impact if present\n    if "impact" in data:\n        try:\n            impact = int(data["impact"])\n            if impact < 1 or impact > 5:\n                errors["impact"] = "impact must be between 1 and 5"\n        except:\n            errors["impact"] = "impact must be an integer"\n    \n    # Validate notes if present\n    if "notes" in data and data["notes"] is not None and len(data["notes"]) > 10000:\n        errors["notes"] = "notes must be 10000 characters or less"\n    \n    return errors\n\ndef validate_cms_link_data(data):\n    """Validate CMS link data"""\n    errors = {}\n    \n    # Required fields\n    required_fields = ["cms_type", "case_id"]\n    for field in required_fields:\n        if field not in data or not data[field]:\n            errors[field] = f"{field} is required"\n    \n    # Field length validations\n    if "cms_type" in data and len(data["cms_type"]) > 100:\n        errors["cms_type"] = "cms_type must be 100 characters or less"\n    \n    if "case_id" in data and len(data["case_id"]) > 100:\n        errors["case_id"] = "case_id must be 100 characters or less"\n    \n    if "matter_id" in data and data["matter_id"] and len(data["matter_id"]) > 100:\n        errors["matter_id"] = "matter_id must be 100 characters or less"\n    \n    # Type validations\n    if "sync_data" in data and not isinstance(data["sync_data"], bool):\n        errors["sync_data"] = "sync_data must be a boolean"\n    \n    return errors\n\ndef validate_webhook_data(data):\n    """Validate webhook data"""\n    errors = {}\n    \n    # Required fields\n    required_fields = ["target_url", "events", "secret"]\n    for field in required_fields:\n        if field not in data or not data[field]:\n            errors[field] = f"{field} is required"\n    \n    # URL validation\n    if "target_url" in data:\n        url = data["target_url"]\n        if not url.startswith(("http://", "https://")):\n            errors["target_url"] = "target_url must be a valid HTTP or HTTPS URL"\n        elif len(url) > 255:\n            errors["target_url"] = "target_url must be 255 characters or less"\n    \n    # Events validation\n    if "events" in data:\n        if not isinstance(data["events"], list):\n            errors["events"] = "events must be an array"\n        elif not data["events"]:\n            errors["events"] = "events array cannot be empty"\n        else:\n            valid_events = [\n                "assessment.created", "assessment.updated", "assessment.deleted",\n                "factor.updated", "result.calculated", "risk_level.changed",\n                "link.created", "link.updated", "link.deleted"\n            ]\n            invalid_events = [event for event in data["events"] if event not in valid_events]\n            if invalid_events:\n                errors["events"] = f"Invalid events: {\', \'.join(invalid_events)}"\n    \n    # Secret validation\n    if "secret" in data:\n        if len(data["secret"]) < 16:\n            errors["secret"] = "secret must be at least 16 characters"\n        elif len(data["secret"]) > 100:\n            errors["secret"] = "secret must be 100 characters or less"\n    \n    # Content type validation\n    if "content_type" in data:\n        valid_content_types = ["application/json", "application/x-www-form-urlencoded"]\n        if data["content_type"] not in valid_content_types:\n            errors["content_type"] = f"content_type must be one of: {\', \'.join(valid_content_types)}"\n    \n    return errors\n</create-file>\n</function_calls>', 'tool_calls': None}